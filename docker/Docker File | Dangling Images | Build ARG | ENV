 Dangling Image | 
how to pss build parameter during the time of building images |
how to pass env variable in running container|
dockerfile|
--------------------------------------------------------------------------------------------------------------------------------------------
in prod defult image are not used - we take it and modify it
--------------------------------------------------------------------------------------------------------------------------------------------

Docker File part 01
This repository contains a Dockerfile for setting up an environment with Terraform and Packer on an Ubuntu base image.
Below are the steps and commands used in the Dockerfile and for running the container.

Dockerfile Overview
The Dockerfile performs the following tasks:

Sets up an Ubuntu base image.
Installs necessary tools (jq, net-tools, curl, wget, unzip, nginx, iputils-ping).
Downloads and installs specific versions of Terraform and Packer.
Runs nginx in the foreground.
Dockerfile Contents

------------------------------------------------------------------------------------------------------------------------------------------------
vim dockerfile.dev
FROM ubuntu:latest

LABEL name="saikiran"

ENV AWS_ACCESS_KEY_ID=SDFSDFSDFSDFSDFSDFSDFSDF \
    AWS_SECRET_ACCESS_KEY=SDSDSDSDSDSDSDSDSDSDSDSD \
    AWS_DEFAULT_REGION=US-EAST-1A

ARG T_VERSION='1.6.6'
ARG P_VERSION='1.8.0'

RUN apt update && apt install -y jq net-tools curl wget unzip \
    && apt install -y nginx iputils-ping \
    && wget https://releases.hashicorp.com/terraform/${T_VERSION}/terraform_${T_VERSION}_linux_amd64.zip \
    && wget https://releases.hashicorp.com/packer/${P_VERSION}/packer_${P_VERSION}_linux_amd64.zip \
    && unzip terraform_${T_VERSION}_linux_amd64.zip \
    && unzip packer_${P_VERSION}_linux_amd64.zip \
    && chmod 777 terraform packer \
    && ./terraform version \
    && ./packer version

CMD ["nginx", "-g", "daemon off;"]

without tag
docker build -f dockerfile.dev .

with tag
docker build -t kiran2361993/custom:v1 -f dockerfile.dev .

If you are asking for a **word-by-word meaning** of the command:

```sh
docker tag myapp:latest myrepo/myapp:v1.0
```

Hereâ€™s the breakdown:

- **`docker`** â†’ Refers to the Docker CLI (command-line interface).  
- **`tag`** â†’ The command used to assign a new name (tag) to an existing image.  
- **`myapp:latest`** â†’ The existing Docker image name:
  - `myapp` â†’ The repository name (image name).  
  - `latest` â†’ The tag of the existing image (default if no tag is specified).  
- **`myrepo/myapp:v1.0`** â†’ The new name (tag) assigned to the image:
  - `myrepo` â†’ The target repository (can be local or remote, like Docker Hub).  
  - `myapp` â†’ The name of the image.  
  - `v1.0` â†’ The version tag assigned to the image.  

Would you like an even more detailed explanation? ðŸ˜Š

docker run --rm -d --name app1 -p 8000:80 kiran2361993/custom:v1
docker build -t kiran2361993/custom:v1 -f dockerfile.dev . --no-cache
---------------------------------------------------------------------------------------------------------------------------------------------------------------
docker exec -it app1 bash
las -al
login to container and check it that is called smoke test  -----imp
---------------------------------------------------------------------------
how we can pass the build paramerters when running build ??  ----iq

arg can pass running build not running container   ----------------------------------------------imp
env pass when running conatiner not running build 
-------------------------------------------------------------------------------------------------------------


to overite version

docker build -t kiran2361993/custom:vl \
  --build-arg T_VERSION='1.5.0' \
  --build-arg P_VERSION='1.4.0' \
  -f dockerfile.dev . --no-cache

ya command mde all content dist nahit

For Docker on Linux: If you're using Docker on Linux and buildx is not available, you can install it by running:

mkdir -p ~/.docker/cli-plugins
curl -sSL https://github.com/docker/buildx/releases/download/v0.10.1/buildx-v0.10.1.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
chmod +x ~/.docker/cli-plugins/docker-buildx


DOCKER_BUILDKIT=1 docker buildx build -t kiran2361993/custom:v2   --build-arg T_VERSION='1.5.0'   --build-arg P_VERSION='1.4.0'   -f dockerfile.dev . --progress=plain --no-cache


--------------------------------------------------------------------------------------------------------

docker run --rm  -d --name app1 -p 8000:80 kiran2361993/custom:vl
docker exec -it app1 bash
login container and check version change or not
------------------------------------------------------------------------------------------------------
to see credential
docker exec -it app1 env  

to hide credential
docker run -d --name app2 -p 8001:80 -e AWS_ACCESS_KEY_ID=hidden -e AWS_SECRET_ACCESS_KEY=hidden -e AWS_DEFAULT_REGION=hidden kiran2361993/custom:v1
docker exec -it app2 env
--------------------------------------------------------------------------------------------------------------------------------------------------------
how to crete dangling image 
first build v1 - on top of it again added tag then old iamge will gone it will be overwritten with new image   --------imp
docker system prune y
---------------------------------------------------------------------------------------------------------------------------------------------------------




T
