
bridge: Default network for containers on the same host to communicate.

host: Container shares the host‚Äôs network directly for better performance.

none: Container is completely isolated with no network access.

overlay: Allows containers on different Docker hosts to communicate in a Swarm cluster.
---------------------------------------------------------------------------------------------------------------------------
docker persistent volume

docker ps- client - demon in http api call
but how does demon kkown whethre client is asking for docker ps for that ---- docker socket ---------- imp
-------------------------------------------------------------------------------------------------------------

Query Container Status (QCS)
this will be having running status containers 
once the request has been recived QCS it will gives the reverce response to client directly by the help of socket -----imp
-------------------------------------------------------------------------------------------------------------------------------

docker run --rm -d --name mongodb -p 27017:27017 mongo:latest

docker exec -it  mongodb mongosh

show dbs;

db.helo.insertMany([
{ "_id" : 1, "name" : "Matt", "status": "active", "level": 12, "score":202},
        	{ "_id" : 2, "name" : "Frank", "status": "inactive", "level": 2, "score":9},
        	{ "_id" : 3, "name" : "Karen", "status": "active", "level": 7, "score":87},
        	{ "_id" : 4, "name" : "Katie", "status": "active", "level": 3, "score":27, "status": "married", "emp": "yes", "kids": 3},
        	{ "_id" : 5, "name" : "Matt1", "status": "active", "level": 12, "score":202},
        	{ "_id" : 6, "name" : "Frank2", "status": "inactive", "level": 2, "score":9},
        	{ "_id" : 7, "name" : "Karen3", "status": "active", "level": 7, "score":87},
        	{ "_id" : 8, "name" : "Katie4", "status": "active", "level": 3, "score":27, "status": "married", "emp": "yes", "kids": 3}
        	])
db.helo.find({name: "Karen"})


db.helo.find({})
-----------------------------------------------------------------------------------------------------------------------------
 docker stop mongodb
data out
for that volume
---------------------------------------------------------------------------------------------------------------------------
docker volume create mongodb
docker run --rm -d --name mongodb -v mongodb:/data/db -p 27017:27017 mongo:latest
docker exec -it  mongodb mongosh
show dbs;

db.helo.insertMany([
{ "_id" : 1, "name" : "Matt", "status": "active", "level": 12, "score":202},
        	{ "_id" : 2, "name" : "Frank", "status": "inactive", "level": 2, "score":9},
        	{ "_id" : 3, "name" : "Karen", "status": "active", "level": 7, "score":87},
        	{ "_id" : 4, "name" : "Katie", "status": "active", "level": 3, "score":27, "status": "married", "emp": "yes", "kids": 3},
        	{ "_id" : 5, "name" : "Matt1", "status": "active", "level": 12, "score":202},
        	{ "_id" : 6, "name" : "Frank2", "status": "inactive", "level": 2, "score":9},
        	{ "_id" : 7, "name" : "Karen3", "status": "active", "level": 7, "score":87},
        	{ "_id" : 8, "name" : "Katie4", "status": "active", "level": 3, "score":27, "status": "married", "emp": "yes", "kids": 3}
        	])
db.helo.find({name: "Karen"})


db.helo.find({})
exit
stop c
crete again
data will be as it ia

------------------------------------------------------------------------------------------------------
1. Bridge Network (--network bridge)
Default behavior when no network is specified.

‚úÖ Has an IP Address: Yes, assigned from Docker‚Äôs bridge subnet.
‚úÖ Can communicate with other containers: Yes, if they are on the same bridge network.
‚úÖ Can communicate with the internet: Yes, through NAT (Network Address Translation).
‚ùå Cannot be accessed directly from the host: Needs port mapping (-p 8080:80).



2. None Network (--network none)
üö´ Completely isolated from all networks.

‚ùå Has an IP Address: No.
‚ùå Can communicate with other containers: No.
‚ùå Can communicate with the internet: No.
‚ùå Cannot be accessed from the host.



3. Host Network (--network host)
üîó Shares the host network interface.

‚úÖ Has an IP Address: Uses the host‚Äôs IP address.
‚úÖ Can communicate with other containers: Yes, via the host‚Äôs network.
‚úÖ Can communicate with the internet: Yes, same as the host.
‚úÖ Can be accessed directly from the host: Yes, no need for port mapping.



4. Macvlan network 

Here‚Äôs a similar breakdown for a **Macvlan network** in Docker:  

‚úÖ **Has an IP Address:** Yes, assigned from the **same subnet** as the host machine.  
‚úÖ **Can communicate with other containers:** Yes, if they are on the **same Macvlan network**.  
‚úÖ **Can communicate with the internet:** Yes, if the gateway is configured properly.  
‚úÖ **Can be accessed directly from the host:** **No, by default.**
The host cannot communicate with Macvlan containers unless a workaround (such as an additional bridge interface) is used.

usecase
‚úÖ **Legacy Applications** ‚Äì Needs a unique MAC address for licensing or authentication.  
‚úÖ **Direct Network Integration** ‚Äì Containers appear as separate physical devices.  
‚úÖ **Avoid Port Conflicts** ‚Äì Each container gets its own IP, no need for `-p`.  
‚úÖ **Network Isolation** ‚Äì Supports VLANs for multi-tenant setups.  
‚úÖ **High Performance** ‚Äì Bypasses NAT, reducing latency for high-traffic apps.
-----------------------------------------------------------------------------------------------------------------------------------------
docker bound -mount

docker run -v /host/path:/container/path <image>
docker run -it --name mycontainer  -v /home/kausar/data:/app/data ubuntu bash

/home/kausar/data ‚Üí folder on host

/app/data ‚Üí folder inside container




docker run --rm -d --name app1 --network none kiran2361993/troubleshootingtools:v1
docker run --rm -d --name app1 -v /var/run/docker.sock:/var/run/docker.sock --network  none kiran2361993/troubleshootingtools:v1  ---vvimp
none nework doesnt have any ip

Why /var/run/docker.sock:/var/run/docker.sock?
The first /var/run/docker.sock refers to the path on the host (Docker daemon socket).
The second /var/run/docker.sock refers to the path inside the container where it will be mounted.


2Ô∏è‚É£ Bind Mount (‡§¨‡§æ‡§á‡§Ç‡§° ‡§Æ‡§æ‡§â‡§Ç‡§ü)
‚úÖ ‡§π‡•ã‡§∏‡•ç‡§ü ‡§Æ‡§∂‡•Ä‡§®‡§µ‡§∞‡•Ä‡§≤ ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü‡§∞‡•Ä ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞‡§∏‡•ã‡§¨‡§§ ‡§Æ‡§æ‡§â‡§Ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§§‡•á.
‚úÖ ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡•á‡§≤‡§æ ‡§§‡§∞‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ‡§Ø‡§Æ ‡§∞‡§æ‡§π‡§§‡•ã (‡§π‡•ã‡§∏‡•ç‡§ü ‡§Æ‡§∂‡•Ä‡§®‡§µ‡§∞ ‡§§‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Ö‡§∏‡§§‡•ã).
‚úÖ ‡§™‡§£ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§‡§§‡•á‡§ö‡§æ ‡§ß‡•ã‡§ï‡§æ ‡§Ö‡§∏‡§§‡•ã, ‡§ï‡§æ‡§∞‡§£ ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§π‡•ã‡§∏‡•ç‡§ü‡§ö‡•ç‡§Ø‡§æ ‡§´‡§æ‡§Ø‡§≤‡•Ä ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§¨‡§¶‡§≤‡•Ç ‡§∂‡§ï‡§§‡•ã.

üìå ‡§â‡§¶‡§æ‡§π‡§∞‡§£:

docker run -d --name container1 \
    -v /home/kausar/data:/app busybox

üîπ /home/kausar/data ‡§π‡§æ ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§π‡•ã‡§∏‡•ç‡§ü‡§µ‡§∞ ‡§Ö‡§∏‡•á‡§≤ ‡§Ü‡§£‡§ø ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞‡§ö‡•ç‡§Ø‡§æ /app ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Æ‡§æ‡§â‡§Ç‡§ü ‡§π‡•ã‡§à‡§≤.
üîπ ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§¨‡§Ç‡§¶ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡•á‡§≤‡§æ ‡§§‡§∞‡•Ä /home/kausar/data ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§°‡•á‡§ü‡§æ ‡§∞‡§æ‡§π‡•Ä‡§≤.
-------------------------------------------------------------------------------------------
3Ô∏è‚É£ Volume Mount (‡§µ‡•ç‡§π‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§Æ‡§æ‡§â‡§Ç‡§ü)
‚úÖ ‡§°‡•â‡§ï‡§∞ ‡§Ü‡§™‡•ã‡§Ü‡§™ ‡§è‡§ï ‡§µ‡•ç‡§π‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡•ã, ‡§ú‡•ã /var/lib/docker/volumes/ ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞ ‡§π‡•ã‡§§‡•ã.
‚úÖ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§, ‡§ï‡§æ‡§∞‡§£ ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞‡§≤‡§æ ‡§•‡•á‡§ü ‡§π‡•ã‡§∏‡•ç‡§ü ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü‡§∞‡•Ä ‡§¨‡§¶‡§≤‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ó‡§∞‡§ú ‡§®‡§∏‡§§‡•á.
‚úÖ ‡§è‡§ï‡§æ‡§ö ‡§µ‡•ç‡§π‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ‡§≤‡§æ ‡§Ö‡§®‡•á‡§ï ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞‡•ç‡§∏‡§∂‡•Ä ‡§ú‡•ã‡§°‡§§‡§æ ‡§Ø‡•á‡§§‡•á, ‡§§‡•ç‡§Ø‡§æ‡§Æ‡•Å‡§≥‡•á ‡§°‡•á‡§ü‡§æ ‡§∂‡•á‡§Ö‡§∞ ‡§ï‡§∞‡§£‡•á ‡§∏‡•ã‡§™‡•á ‡§π‡•ã‡§§‡•á.
container dont requred to change host dir directly
single volume we can communicate with multiple containers

üìå ‡§â‡§¶‡§æ‡§π‡§∞‡§£:

docker volume create mydata
docker run -d --name container1 \
    -v mydata:/app busybox
docker run -d --name container2 \
    -v mydata:/app busybox
üîπ mydata ‡§π‡§æ ‡§°‡•â‡§ï‡§∞‡§®‡•á ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡•á‡§≤‡•á‡§≤‡§æ ‡§µ‡•ç‡§π‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§Ü‡§π‡•á.
üîπ ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞‡•ç‡§∏ (container1 ‡§Ü‡§£‡§ø container2) ‡§§‡•ç‡§Ø‡§æ‡§ö /app ‡§´‡•ã‡§≤‡•ç‡§°‡§∞‡§≤‡§æ ‡§è‡§ï‡§æ‡§ö ‡§µ‡•ç‡§π‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§°‡•á‡§ü‡§æ ‡§∂‡•á‡§Ö‡§∞ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ‡§§.
üîπ ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡•á‡§≤‡§æ ‡§§‡§∞‡•Ä ‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§æ‡§π‡§§‡•ã (‡§ú‡•ã‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ docker volume rm mydata ‡§ö‡§æ‡§≤‡§µ‡§≤‡•á ‡§ú‡§æ‡§§ ‡§®‡§æ‡§π‡•Ä).
-----------------------------------------------------------------------------------------------------------------------
docker create volume create portainerdata

docker run -d -p 8000:8000 -p 9443:9443 --name portainer \
        --restart=always \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v portainer_data:/data \
        portainer/portainer-ce:2.11.1



