Why We Need Separate Utilization for Docker Data

The default directory for Docker is /var/lib/docker. As you continue downloading images and generating logs, 
this directory will consume more space and eventually get busy. 
To prevent this, we can store all our Docker data in a separate directory.
----------------------------------------------------------------------------------------------------------------------------------
/var/lib/docker/conainers/ hya path la jo data store hote to as root volume mde store hoto  -----imp
-------------------------------------------------------------------------------------------------------------------------------------

sudo mkdir -p /kausar
sudo mv /var/lib/docker /kausar
sudo vim /etc/docker/daemon.json

{
  "data-root": "/kausar"
}

sudo systemctl daemon-reload
sudo systemctl restart docker

Check if Docker is now using /kausar as the data root:

docker info | grep "Docker Root Dir"
Docker Root Dir: /kausar
--------------------------------------------------------------------------------------------------------------------------

docker networking
on which  ip my conatine running to see command 
docker inspect container name ---- in that ip present
docker inspect frontend | grep -i 172.17.0.2
---------------------------------------------------------------------------------
i want ping c1 to c2 
docker exec -it frontend bash
ping ip
but i want ping by name its not possible here   ---------imp
for that crete bridge network allocate it to container and ping each other by name   ----vim
containers are stateless -
ping by using ip not good it may be change

--------------------------------------------------------------------------
we crete 1 custom networl - allocate to 2 conatoner 3 and 4
by using name its success ping
but now i cated bridge network 1 and 2
now i want ping 3 to 1 
docker network connect custom app1  ------most imp command
docker inspect custom
login 3 and ping for 1
------------------------------------------------------------------------------

docker run --rm -d --name nodeexporter --network host prom/node-exporter


### Step-by-Step Process:

#### 1. **Update your package list:**
   First, update the package list on your system:
   
   apt update -y
  

#### 2. **Install Docker:**
   Install Docker on your system using the command:
  
   apt install docker.io
  

#### 3. **Check available disk space:**
   Before creating a custom directory for Docker, check the available disk space:
 
   df -h
 

#### 4. **Create a new directory for Docker data:**
   Create a custom directory (e.g., `/kausar`) to store Docker-related files:
   ```bash
   mkdir /kausar
   ```

#### 5. **Partition and format the disk (Optional if you have an additional disk):**
   - First, list the block devices:
   
     lsblk
     
   - Use `fdisk` to partition the new disk (e.g., `/dev/xvdf`):
   
     fdisk /dev/xvdf

   - Format the partition:
    
     mkfs.ext4 /dev/xvdf1
    

#### 6. **Mount the custom directory:**
   Mount the custom directory to the file system. First, you will need to update `/etc/fstab` with the correct information to mount it on boot:

   nano /etc/fstab
   
   Add an entry for `/dev/xvdf1` (or your disk) and the mount point `/kausar`, then save and close the file.

   After that, mount all filesystems:
  
   mount -a
  

#### 7. **Run Docker containers with custom directories:**
   Run a Docker container using the `nginx` image and bind mount your custom directory to the container's filesystem:
  
   docker run --rm -d --name app1 -p 8000:80 -v /kausar:/usr/share/nginx/html nginx:latest
   

   This command will run an `nginx` container, binding the `/kausar` directory to `/usr/share/nginx/html` in the container, so any files placed in `/kausar` will be accessible inside the container.

#### 8. **Create files with the current date:**
   To create 10 files with the current date inside the `/kausar` directory, use the following loop:

   for i in {1..10}; do
     echo $(date) > /kausar/FILE-$i
   done
 

#### 9. **Verify the files in `/kausar`:**
   List the files in the `/kausar` directory to verify:

   ls -al /kausar


#### 10. **Check Docker container logs (optional):**
   If you need to check the logs of the running Docker container:
  
   docker logs app1


#### 11. **Clean up (optional):**
   If you need to clean up any files created during the process:

   rm -rf /kausar/FILE-*
  




-------------------------------------------------------------------------------------------------------------------------
service dir change steps-----imp


Create additional EBS Volume , fdisk and mount it.
  
sudo systemctl stop docker.service
  
sudo systemctl stop docker.socket
  
sudo nano /lib/systemd/system/docker.service Add the following line with the custom directo
  
#ExecStart=/usr/bin/dockerd -H fd:// -- containerd=/run/containerd/containerd.sock
  
ExecStart=/usr/bin/dockerd --data-root /dockerdata -H fd:// --containerd=/run/containerd/containerd.sock

sudo rsync -aqxP /var/lib/docker/ /dockerdata
  
sudo systemctl daemon-reload && sudo systemctl start docker
  
sudo systemctl status docker --no-pager
  
ps aux | grep -i docker | grep -v grep
---------------------------------------------------------------------------------------------------------------------------
sudo mkdir -p /kausar
sudo mv /var/lib/docker /kausar
sudo vim /etc/docker/daemon.json

{
  "data-root": "/kausar"
}

sudo systemctl daemon-reload
sudo systemctl restart docker

Check if Docker is now using /kausar as the data root:

docker info | grep "Docker Root Dir"
Docker Root Dir: /kausar
--------------------------------------------------------------------------------------------------------------------------

docker networking
on which  ip my conatine running to see command 
docker inspect container name ---- in that ip present
docker inspect frontend | grep -i 172.17.0.2
---------------------------------------------------------------------------------
i want ping c1 to c2 
docker exec -it frontend bash
ping ip
but i want ping by name its not possible here   ---------imp
for that crete bridge network allocate it to container and ping each other by name   ----vim
containers are stateless -
ping by using ip not good it may be change

--------------------------------------------------------------------------
we crete 1 custom networl - allocate to 2 conatoner 3 and 4
by using name its success ping
but now i cated bridge network 1 and 2
now i want ping 3 to 1 
docker network connect custom app1  ------most imp command
docker inspect custom
login 3 and ping for 1
------------------------------------------------------------------------------

docker run --rm -d --name nodeexporter --network host prom/node-exporter

