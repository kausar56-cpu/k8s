Linux Scenario Based Interview Questions

1. Scenario: A critical service has stopped on a production server. How would you troubleshoot and restart the service?
•	Detailed Answer:
1.	Check the service status: Use systemctl status <service_name> to determine the current state of the service (active, inactive, or failed). This command provides information on the last log entries that may help pinpoint why the service stopped.
2.	Check logs: Look at the logs for clues. Use journalctl -u <service_name> to view logs related to the specific service or /var/log/syslog for system-wide logs. This will help you find any critical errors or warnings.
3.	Restart the service: To bring the service back online, use systemctl restart <service_name>. This command attempts to restart the service, and if it fails again, you may need to look deeper into configuration or resource issues.
4.	Check resource usage: Run top or htop to inspect CPU and memory usage. If the server is running out of resources, it may be causing the service to crash.
5.	Check disk space: Use df -h to see if the disk is full. Services often fail if there’s no free space for logs or operations.
6.	Validate service configuration: Inspect the service’s configuration file (for example, Nginx has /etc/nginx/nginx.conf) to ensure that settings are correct and haven’t been corrupted.

********

2. Scenario: You need to give non-root users access to a directory but with restricted permissions. How would you achieve this?
•	Detailed Answer:
1.	Change directory ownership: Use chown <user>:<group> <directory> to assign the ownership of the directory to a specific user and group. This ensures only the intended user/group has control over the directory.
2.	Set permissions: Apply chmod to assign specific access levels. For example, chmod 750 gives the owner full permissions, the group read and execute, and others no access.
3.	Advanced permission control: For more granular access control, use setfacl. With setfacl -m u:<user>:rwx <directory>, you can provide specific permissions to multiple users without affecting group permissions.

********

3. Scenario: A script scheduled via cron has stopped running. How would you troubleshoot it?
•	Detailed Answer:
1.	List cron jobs: Run crontab -l (for user-specific cron jobs) or check /etc/crontab for system-wide jobs. Ensure the cron job hasn’t been accidentally removed or modified.
2.	Check cron logs: Use grep CRON /var/log/syslog (on Debian-based systems) or /var/log/cron (on RedHat-based systems) to look for errors in cron’s execution.
3.	Ensure script is executable: Verify that the script has execute permissions using chmod +x <script>.
4.	Environment differences: Cron operates in a limited environment, so ensure all necessary environment variables are defined within the script or cron job.
5.	Test manually: Run the script manually in the terminal to confirm whether the issue is with the cron job or the script itself.

********

4. Scenario: You need to debug network issues on a Linux server. What tools would you use?
•	Detailed Answer:
1.	ping: Use ping <hostname/IP> to check if the server can reach the target host and verify basic network connectivity.
2.	traceroute: Run traceroute <hostname/IP> to track the path that packets take to the destination. This helps identify where delays or failures occur in the network path.
3.	netstat or ss: Use netstat -tuln or ss -tuln to see active connections, listening ports, and associated processes. This is useful to verify that your service is listening on the correct port.
4.	tcpdump: Capture network traffic with tcpdump to analyze packets. This is helpful for identifying malformed packets or unauthorized traffic.
5.	iptables or firewalld: Use iptables -L or firewalld to check if firewall rules are blocking traffic.
6.	nslookup/dig: Use nslookup or dig to troubleshoot DNS issues, ensuring the domain name resolves to the correct IP.

********

5. Scenario: You notice high memory consumption on a server. How would you identify the cause and take corrective action?
•	Detailed Answer:
1.	Monitor memory usage: Use top or htop to identify processes consuming high amounts of memory.
2.	Check memory usage breakdown: Run free -m to get a detailed breakdown of used, free, and cached memory.
3.	List memory-hogging processes: Use ps aux --sort=-%mem to get a sorted list of processes by memory usage.
4.	Investigate and restart processes: Identify any rogue or misbehaving processes consuming excessive memory and consider restarting them.
5.	Clear cache (if safe): If you suspect memory is being filled by cache, you can clear it (temporarily) with echo 3 > /proc/sys/vm/drop_caches.
6.	Add swap space: If memory usage consistently exceeds available RAM, consider adding swap space as a buffer.

********

6. Scenario: How would you secure SSH access on a production server?
•	Detailed Answer:
1.	Disable root login: Edit /etc/ssh/sshd_config and set PermitRootLogin no to prevent root from logging in directly. This minimizes the risk of unauthorized root access.
2.	Use key-based authentication: Ensure PasswordAuthentication no is set in the SSH configuration, forcing users to authenticate using SSH keys rather than passwords.
3.	Change the default SSH port: Modify the Port directive in /etc/ssh/sshd_config to use a non-standard port (e.g., 2222) to reduce the likelihood of automated attacks.
4.	Restrict access with a firewall: Use iptables or ufw to restrict SSH access to specific IPs or ranges.
5.	Implement Fail2Ban: Install and configure Fail2Ban to ban IPs after multiple failed login attempts, protecting against brute-force attacks.
6.	Enable 2FA: Add two-factor authentication (2FA) to further secure SSH access, using tools like Google Authenticator or Duo.

********

7. Scenario: The disk space on a server is filling up rapidly. How would you address this issue?
•	Detailed Answer:
1.	Find large files: Use du -sh /* or du -h --max-depth=1 to find which directories or files are consuming the most space.
2.	Find recently modified files: Use find / -type f -mtime -1 to identify files that have been recently modified and might be filling up the disk.
3.	Check log directories: Often, large log files in /var/log/ are the culprits. Investigate and truncate or rotate large logs.
4.	Use log rotation: Ensure logrotate is set up to rotate logs and prevent them from growing indefinitely.
5.	Clean package cache: Run apt-get clean (Debian-based) or yum clean all (RedHat-based) to free up space by clearing cached packages.
6.	Add disk space: If the above steps don’t resolve the issue, consider adding additional disk space or resizing existing partitions.

********

8. Scenario: You need to monitor a process's performance in real-time. What Linux commands would you use?
•	Detailed Answer:
1.	top/htop: Use top or htop to monitor the system's overall resource usage, including CPU, memory, and load averages. These commands provide a real-time view of processes.
2.	strace: Use strace to trace system calls and signals for a specific process. This is helpful for debugging issues at the system call level.
3.	iotop: Monitor disk I/O usage by processes using iotop. It shows which processes are responsible for I/O load.
4.	dstat: Use dstat for a real-time overview of system resource usage, including CPU, disk, network, and memory.
5.	vmstat: Use vmstat to monitor virtual memory usage and system performance metrics like CPU, I/O, and memory utilization.

********

9. Scenario: You need to automate a repetitive task. How would you implement this in Linux?
•	Detailed Answer:
1.	Create a Bash script: Write a simple Bash script to automate the task. Example:
bash
Copy code
#!/bin/bash
# This script automates a task
command1
command2
2.	Make the script executable: Use chmod +x <script.sh> to allow execution.
3.	Schedule with cron: Automate the execution of the script by scheduling it with cron. Use crontab -e to add a cron job. Example:
javascript
Copy code
0 2 * * * /path/to/script.sh
4.	Use systemd for complex tasks: If the task involves managing services or long-running processes, create a systemd service to manage and automate it.

*******

10. Scenario: You notice a "too many open files" error for a process. How do you resolve it?
•	Detailed Answer:
1.	Check current limits: Use ulimit -n to check the current limit on open files for the shell.
2.	Increase the limit temporarily: Use ulimit -n <new_limit> to increase the open file limit for the session.
3.	Make the change persistent: Add the new limits to /etc/security/limits.conf:
php
Copy code
<user> soft nofile 4096
<user> hard nofile 8192
4.	Modify system-wide limits: For system-wide changes, update /etc/sysctl.conf with:
arduino
Copy code
fs.file-max = 100000
Then apply the changes using sysctl -p.

********

11. Scenario: You need to find and kill a process that’s consuming too many resources, but you only know part of its name. How do you proceed?
•	Answer:
1.	Use ps aux | grep <partial_name> to find the process ID (PID).
2.	Use kill <PID> to terminate the process. If the process doesn’t stop, use kill -9 <PID>.


12. Scenario: You are tasked with reducing boot time on a Linux server. What steps would you take?
•	Answer:
1.	Disable unnecessary services: List services using systemctl list-unit-files and disable those not required at boot.
2.	Optimize systemd services: Enable parallel service startup by ensuring systemd uses systemctl enable <service>.
3.	Analyze startup times: Use systemd-analyze blame to determine which services take the longest to start.


13. Scenario: A user complains of slow disk I/O performance. How would you troubleshoot and address this
•	Answer:
1.	Use iotop to identify processes with high disk usage.
2.	Check disk health with smartctl -a /dev/sdX.
3.	Use iostat -xz 1 to analyze detailed disk I/O stats and pinpoint performance issues.
4.	Optimize filesystem performance by using tune2fs and adjusting the mount options like noatime.


14. Scenario: A critical file is accidentally deleted, and you need to recover it. How would you proceed?
•	Answer:
1.	If backups are available, restore from a backup.
2.	Use extundelete (on ext filesystems) or testdisk to attempt to recover deleted files.
3.	Ensure the filesystem is mounted in read-only mode to prevent overwriting recoverable data.


15. Scenario: How would you secure file transfers between servers?
•	Answer:
1.	Use SSH/SCP: Transfer files securely over SSH using scp <file> user@server:/path/to/destination.
2.	Use SFTP: For secure, interactive file transfers, use sftp user@server.
3.	Automate with rsync: Use rsync -avz -e ssh <source> <destination> for efficient, secure file synchronization.


16. Scenario: How would you troubleshoot a server that is unresponsive to SSH connections but still pingable?
•	Answer:
1.	Check if the SSH service is running with systemctl status sshd.
2.	Verify the firewall rules using iptables -L or firewalld to ensure SSH traffic is allowed.
3.	Investigate /var/log/auth.log for authentication or connection issues.
4.	Check for resource exhaustion (CPU/memory) using top or vmstat.


17. Scenario: You need to monitor disk space on a server over time. What steps would you take?
•	Answer:
1.	Use df -h to monitor disk usage and du -sh for specific directories.
2.	Set up periodic monitoring with cron, logging the output of df -h into a file for future analysis.
3.	Implement monitoring tools like Nagios or Prometheus to generate alerts when disk usage exceeds a threshold.


18. Scenario: How would you copy files between two Linux servers automatically, ensuring security and reliability?
•	Answer:
1.	Use rsync over SSH for secure and reliable file transfers: rsync -avz -e ssh /source/ user@server:/destination/.
2.	Set up SSH key-based authentication between the servers to avoid using passwords in scripts.
3.	Automate the process with a cron job to periodically sync files between the servers.


19. Scenario: You are asked to automate the backup of specific directories daily. How would you implement this?
•	Answer:
1.	Write a shell script that uses tar or rsync to archive the directories and save them in a backup location.
2.	Schedule the script with a cron job: crontab -e and add a job like 0 2 * * * /path/to/backup_script.sh to run it daily at 2 AM.
3.	Use rsync to sync backups to a remote server or cloud storage for redundancy.


20. Scenario: A user accidentally changed the permissions of /etc to 777. How would you fix this issue?
•	Answer:
1.	Boot the system into single-user mode to limit further damage.
2.	Restore permissions using a backup or by referencing a similar system.
3.	For key files and directories, correct the permissions manually using chmod and chown, e.g., chmod 755 /etc, chmod 644 /etc/passwd.


21. Scenario: How do you add a new disk to a Linux server and mount it persistently across reboots?
•	Answer:
1.	Identify the new disk: Use fdisk -l or lsblk to find the new disk.
2.	Partition the disk: Use fdisk /dev/sdX to create partitions.
3.	Format the partition: Use mkfs.ext4 /dev/sdX1 to format the partition.
4.	Mount the disk: Mount the disk using mount /dev/sdX1 /mnt/mydisk.
5.	Persist the mount: Add an entry in /etc/fstab to ensure the disk is mounted on reboot: /dev/sdX1 /mnt/mydisk ext4 defaults 0 2.


22. Scenario: How would you troubleshoot a sudden spike in server load?
•	Answer:
1.	Use top or htop: Identify processes consuming the most CPU or memory.
2.	Check I/O activity: Use iotop or iostat to identify disk I/O bottlenecks.
3.	Analyze logs: Check /var/log/syslog or application logs to identify any anomalies or errors.
4.	Check running services: Use systemctl list-units --type=service to see if any services are using excessive resources.


23. Scenario: How would you configure automatic log rotation to avoid disk space exhaustion?
•	Answer:
1.	Edit /etc/logrotate.conf or create a custom configuration in /etc/logrotate.d/.
2.	Set up parameters for log rotation, such as the number of rotated files to keep (rotate 5), size limits (size 100M), and frequency (daily or weekly).
3.	Ensure that logrotate is scheduled by default using cron (/etc/cron.daily/logrotate).


24. Scenario: How would you set up a secure FTP server on Linux?
•	Answer:
1.	Install vsftpd: Use sudo apt-get install vsftpd (Debian) or yum install vsftpd (RedHat).
2.	Configure vsftpd: Edit /etc/vsftpd.conf, enabling features like anonymous FTP (anonymous_enable=NO) and secure file transfer (ssl_enable=YES).
3.	Create FTP users: Add users with restricted access using useradd -d /home/ftpdir -s /bin/false <username>.
4.	Enable firewall rules: Use iptables or ufw to allow FTP/FTPS ports (21 and 990 for FTPS).


25. Scenario: How would you troubleshoot high swap usage on a Linux system?
•	Answer:
1.	Check swap usage: Use swapon -s or free -m to determine how much swap is being used.
2.	Investigate memory usage: Use top or htop to find processes consuming excessive memory and triggering swap.
3.	Adjust swappiness: Modify the swappiness value (/proc/sys/vm/swappiness) using sysctl to reduce swap usage. A value of 10-20 is generally recommended.
4.	Add more RAM: If the system consistently uses swap, consider adding more RAM to alleviate the issue.


26. Scenario: How would you forcefully unmount a busy filesystem?
•	Answer:
1.	Use umount -f /mount_point to forcefully unmount the filesystem.
2.	If that fails, use lsof or fuser -cu /mount_point to identify and kill the processes that are using the mount.
3.	After terminating the processes, retry the unmount.


27. Scenario: You need to encrypt a directory’s contents. What steps would you take?
•	Answer:
1.	Install ecryptfs-utils and create an encrypted directory using ecryptfs-setup-private.
2.	Mount the encrypted directory using mount -t ecryptfs /path/to/dir /path/to/dir.
3.	Use ecryptfs-mount-private and ecryptfs-umount-private for easy mounting/unmounting.


28. Scenario: How would you investigate and fix an issue where the system time is incorrect?
•	Answer:
1.	Check the current time: Use date to check the system's current time.
2.	Sync with NTP server: Install and configure the ntp package. Use ntpd or timedatectl to sync the system time with an NTP server.
3.	Correct timezone: Set the correct timezone using timedatectl set-timezone <region/city>.


29. Scenario: How would you monitor network traffic to troubleshoot connectivity issues?
•	Answer:
1.	Use tcpdump to capture and analyze network traffic: tcpdump -i eth0 -nn port 80.
2.	Use iftop or nload for real-time bandwidth monitoring.
3.	Use netstat -plnt to display listening services and connections.


30. Scenario: You want to restrict a user from accessing certain directories. How would you implement this?
•	Answer:
1.	File permissions: Use chmod and chown to modify directory permissions, restricting access.
2.	ACLs (Access Control Lists): Use setfacl and getfacl to set more granular permissions for specific users on files and directories.
3.	Chroot jail: For additional security, create a chroot jail, isolating the user to a specific directory.

