vim log.sh
#!/bin/bash
dir= "/root/" ----log path
current_time= $((date+%s))
current time-300sec=5min

time_threshold = $((current_time -300))

find "$dir" -type f -newermt "$(date-d @ $ time_threshold + '%Y-%M-%D-%H-%M-%S'- Delete)

echo "files deleted sucessfully"



#!/bin/bash
read -p "Enter first number: " num1
read -p "Enter second number: " num2
sum=$((num1 + num2))
echo "The sum is $sum"






#!/bin/bash
file_name="example.txt"
if [ -f $file_name ]; then
    echo "File $file_name exists."
else
    echo "File $file_name does not exist."
fi  






### **The Script**
```bash
#!/bin/bash
for i in {1..5}; do
    echo "Number: $i"
done
```






### Full Script:
```bash
#!/bin/bash
# Check disk usage
threshold=80
usage=$(df / | grep / | awk '{ print $5 }' | sed 's/%//g')

if [ $usage -gt $threshold ]; then
  echo "Warning: Disk usage is over $threshold%. Current usage: $usage%"
else
  echo "Disk usage is under control. Current usage: $usage%"
fi
```

if [$usage -gt $threshold ]; then
echo "warning : disk usage is over $threshold%.
else
echo "disk usage is under control""

-------------------------------------------------------------------------------------------



#!/bin/bash

# First condition: check if the first argument is "Foo"
if [ "$1" = "Foo" ]; then
  echo "bar"
fi

# Second condition: check if the second argument is "bar"
if [ "$2" = "bar" ]; then
  echo "foo"
fi


----------------------------------------------------------------------------------------------------------------

#!/bin/bash
read -p "Enter username: " username
useradd -m "$username"
echo "User '$username' created successfully!"
-----------------------------------------------------------------------------------------------------------

ùê¨ùêúùê´ùê¢ùê©ùê≠ ùê≠ùê® ùêüùê¢ùêßùêù/ùê≠ùê´ùêöùêúùê§ ùêöùê∞ùê¨ ùê´ùêûùê¨ùê®ùêÆùê´ùêúùêûùê¨ ùêÆùê¨ùêöùê†ùêû:
aws_resource_track.sh

#!/bin/bash
###############################
# Author: Swapnil
# Date: 1st-Feb
# Version: v1
# This script will report the AWS resource usage
###############################

set -x

# ùêÄùêñùêí ùêíùüë
# ùêÄùêñùêí ùêÑùêÇùüê
# ùêÄùêñùêí ùêãùêöùê¶ùêõùêùùêö
# ùêÄùêñùêí ùêàùêÄùêå ùêîùê¨ùêûùê´ùê¨

# ùê•ùê¢ùê¨ùê≠ ùê¨ùüë ùêõùêÆùêúùê§ùêûùê≠ùê¨
echo "Print list of s3 buckets"
aws s3 ls

hashtag#ùê•ùê¢ùê¨ùê≠ ùêûùêúùüê ùê¢ùêßùê¨ùê≠ùêöùêßùêúùêûùê¨
echo "list of ec2 instances are"
aws ec2 describe-instances | jq '.Reservations[].Instances[].InstanceId'

# ùê•ùê¢ùê¨ùê≠ ùê®ùêü ùê•ùêöùê¶ùêõùêùùêö ùêüùêÆùêßùêúùê≠ùê¢ùê®ùêßùê¨
echo "Print list of lambda functions"
aws lambda list-functions

hashtag#ùê•ùê¢ùê¨ùê≠ ùê®ùêü ùêàùêÄùêå ùêÆùê¨ùêûùê´ùê¨
echo "Print list of IAM users"
aws iam list-users

########################################

ùëµùíêùíò ùíòùíÜ ùíÑùíÇùíè ùíÇùíñùíïùíêùíéùíÇùíïùíÜ ùíïùíâùíäùíî ùíïùíÇùíîùíå ùíòùíäùíïùíâ ùíïùíâùíÜ ùíâùíÜùíçùíë ùíêùíá ùíÑùíìùíêùíèùíïùíÇùíÉ/ùíÑùíìùíêùíèùíãùíêùíÉ

-> crontab -e
-> 0 8 * * * /usr/bin/bash /home/ubuntu/aws_resource_track.sh >> tracker.log 2>&1

ùëªùíâùíäùíî ùë™ùíìùíêùíè ùíÜùíôùíëùíìùíÜùíîùíîùíäùíêùíè ùíòùíäùíçùíç ùíìùíñùíè ùíïùíâùíÜ ùíãùíêùíÉ ùíÜùíóùíÜùíìùíö ùíÖùíÇùíö ùíÇùíï 8ùíÇùíé
----------------------------------------------------------------------------------------------------

#!/bin/bash

if systemctl is-active --quiet docker; then
    echo "Docker is running."
else
    echo "Docker is not running. Restarting..."
    sudo systemctl restart docker && echo "Docker restarted successfully." || echo "Failed to restart Docker."
fi






---------------------------------------------------------------------------------------------------
How to check if a user already exists in Linux.

### **Script:**  

#!/bin/bash

# Define the username to check
USERNAME="kausar"

# Check if the user exists
if id "$USERNAME" &>/dev/null; then
    echo "‚úÖ User '$USERNAME' exists."
else
    echo "‚ùå User '$USERNAME' does not exist."
fi




### **How to Use:**  
1. **Save the script** as `check_user.sh`:  

   nano check_user.sh
 
   Paste the script inside and save it (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
  
   chmod +x check_user.sh
  

3. **Run the script:**  
 
   ./check_user.sh
 



### **What This Script Does:**  
‚úÖ Checks if the given user exists in the system.  
‚úÖ Uses `id` command for verification.  
‚úÖ Displays a success or failure message.  

Let me know if you need modifications! üöÄ
--------------------------------------------------------------------------------------------------------

#!/bin/bash

# Define the old and new filenames
old_name="oldfile.txt"
new_name="newfile.txt"

# Rename the file
mv "$old_name" "$new_name"

echo "File renamed from $old_name to $new_name"
------------------------------------------------------------------------------------------------

#!/bin/bash

# Define the output
output="k, m, f, o, p"

# Print the output
echo "$output"

-------------------------------------------------------------------------------------------------------------------------------
How to create users automatically using Bash scripting.


### **Script:**

#!/bin/bash

# Define the username
USERNAME="newuser"

# Check if the user already exists
if id "$USERNAME" &>/dev/null; then
    echo "‚ùå User '$USERNAME' already exists!"
    exit 1
fi

# Create the user with a home directory
useradd -m -s /bin/bash "$USERNAME"

# Set a default password (change as needed)
echo "$USERNAME:Password@123" | chpasswd

# Force password reset on first login
passwd --expire "$USERNAME"

# Display success message
echo "‚úÖ User '$USERNAME' created successfully!"




### **How to Use:**  
1. Save the script as `create_user.sh`:  
   ```bash
   nano create_user.sh
   ```
   Paste the script inside and save (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
   ```bash
   chmod +x create_user.sh
   ```

3. **Run as root:**  
   ```bash
   sudo ./create_user.sh
   ```

---

### **What This Script Does:**  
‚úÖ Checks if the user **already exists**  
‚úÖ Creates a **new user** with a home directory  
‚úÖ Sets a **default password**  
‚úÖ Forces the user to **change password on first login** 

===========================================================================================================


-------------------------------------------------------------------------------------------------------------------------------
Random password generation with special characters.



### **Script:**
```bash
#!/bin/bash

# Generate a random password (12 characters with special characters)
PASSWORD=$(openssl rand -base64 12 | tr -d '/+=' | fold -w 12 | head -n 1)

# Display the generated password
echo "Generated Password: $PASSWORD"
```

---

### **How to Use:**  
1. Save the script as `generate_password.sh`:  
   ```bash
   nano generate_password.sh
   ```
   Paste the script inside and save (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
   ```bash
   chmod +x generate_password.sh
   ```

3. **Run the script:**  
   ```bash
   ./generate_password.sh
   ```

---

### **What This Script Does:**  
‚úÖ Uses `openssl` to generate a **secure** random password  
‚úÖ Ensures **special characters** are included  
‚úÖ Avoids problematic characters like `/`, `+`, and `=`  

üí° **Example Output:**  
```
Generated Password: GkP!3tB7mZ#2
```


------------------------------------------------------------------------------------------------------------------------------------
How to force a password reset on the first login.

To **force a user to reset their password** on the first login in Linux, use the `passwd --expire` command.  

---

### **Manual Method:**  
Run the following command as root:  
```bash
sudo passwd --expire username
```
üîπ This will **force** the user to change their password upon next login.

---

### **Bash Script to Automate Password Reset:**  
Here‚Äôs a script to **create a new user** and **force a password reset** at first login.  

```bash
#!/bin/bash

# Define the username
USERNAME="newuser"

# Check if user already exists
if id "$USERNAME" &>/dev/null; then
    echo "‚ùå User '$USERNAME' already exists!"
    exit 1
fi

# Create the user with a home directory
useradd -m -s /bin/bash "$USERNAME"

# Set a default password (change as needed)
echo "$USERNAME:Password@123" | chpasswd

# Force password reset on first login
passwd --expire "$USERNAME"

echo "‚úÖ User '$USERNAME' created successfully!"
echo "üîë Password reset is required on first login."
```

---

### **How to Use:**  
1. **Save the script:**  
   ```bash
   nano force_password_reset.sh
   ```
   Paste the script inside and save (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
   ```bash
   chmod +x force_password_reset.sh
   ```

3. **Run as root:**  
   ```bash
   sudo ./force_password_reset.sh
   ```

---

### **What This Script Does:**  
‚úÖ **Checks if the user exists**  
‚úÖ **Creates a new user** if not already present  
‚úÖ **Sets a default password**  
‚úÖ **Forces password change on first login**  

Let me know if you need modifications! üöÄ
---------------------------------------------------------------------------------------------------------------------------------------------------------
1.check the available free memory on the sytem and alert the user if it falls below a threshold en 10.

#!/bin/bash

THRESHOLD=10  # Set threshold in MB
FREE_MEM=$(free -m | awk '/Mem:/ {print $7}')  # Get free memory in MB

echo "Available Memory: $FREE_MEM MB"

if [[ $FREE_MEM -lt $THRESHOLD ]]; then
    echo "‚ö†Ô∏è WARNING: Low Memory!"
fi

-------------------------------------------------------------------------------------------------------------------------------
2.to automate the creation of new user specific permission and home dir

Here‚Äôs a **simple Bash script** to automate the creation of a new user with specific permissions and a home directory.  

---

### **Script:**
```bash
#!/bin/bash

# Check if the script is run as root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå This script must be run as root."
   exit 1
fi

# Set the username (Change as needed or take input)
read -p "Enter the new username: " USERNAME

# Create the user with a home directory
useradd -m -s /bin/bash "$USERNAME"

# Set a password for the user
echo "Set password for $USERNAME:"
passwd "$USERNAME"

# Set specific permissions for the home directory
chmod 750 /home/"$USERNAME"

# Add user to a specific group (optional)
usermod -aG sudo "$USERNAME"

echo "‚úÖ User $USERNAME created successfully with a home directory and permissions!"
```

---

### **How to Use:**
1. Save the script as `create_user.sh`
2. Give execute permission:  
   ```bash
   chmod +x create_user.sh
   ```
3. Run as root:  
   ```bash
   sudo ./create_user.sh
   ```
4. Enter the username and set a password when prompted.

---

### **What This Script Does:**
‚úÖ Creates a new user with a home directory  
‚úÖ Sets a password for the user  
‚úÖ Grants **read, write, and execute** permissions to the user (750 permissions)  
‚úÖ Optionally adds the user to the **sudo** group  

Let me know if you need changes! üöÄ
-----------------------------------------------------------------------------------------------------------------------------
3.write shell script to find all large files greater than 1gb in dir move them another dir

Here‚Äôs a **simple Bash script** to find all files larger than **1GB** in a directory and move them to another directory.  

---

### **Script:**
```bash
#!/bin/bash

# Source directory (where to search)
SOURCE_DIR="/path/to/source"

# Destination directory (where to move large files)
DEST_DIR="/path/to/destination"

# Ensure destination directory exists
mkdir -p "$DEST_DIR"

# Find files larger than 1GB and move them
find "$SOURCE_DIR" -type f -size +1G -exec mv {} "$DEST_DIR" \;

echo "‚úÖ All files larger than 1GB have been moved to $DEST_DIR."
```

---

### **How to Use:**
1. Save the script as `move_large_files.sh`
2. Replace **`/path/to/source`** and **`/path/to/destination`** with actual paths.
3. Give execute permission:  
   ```bash
   chmod +x move_large_files.sh
   ```
4. Run the script:  
   ```bash
   ./move_large_files.sh
   ```

---

### **What This Script Does:**
‚úÖ Searches for files **larger than 1GB** in the specified directory  
‚úÖ Moves them to the **destination folder**  
‚úÖ Creates the destination folder if it doesn‚Äôt exist  

Let me know if you need modifications! üöÄ
----------------------------------------------------------------------------------------------------------------
4.write script that automatically update all instlled pakege on system and rebot system if needed

Here‚Äôs a **simple Bash script** to automatically update all installed packages and reboot the system if needed.  

---

### **Script:**
```bash
#!/bin/bash

# Check if the script is run as root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå This script must be run as root."
   exit 1
fi

echo "üîÑ Updating all installed packages..."
apt update && apt upgrade -y

# Check if a reboot is required
if [ -f /var/run/reboot-required ]; then
    echo "‚ö†Ô∏è Reboot required! Restarting system..."
    reboot
else
    echo "‚úÖ System is up-to-date. No reboot needed."
fi
```

---

### **How to Use:**
1. Save the script as `update_and_reboot.sh`
2. Give execute permission:  
   ```bash
   chmod +x update_and_reboot.sh
   ```
3. Run as root:  
   ```bash
   sudo ./update_and_reboot.sh
   ```

---

### **What This Script Does:**
‚úÖ Updates all installed packages using `apt`  
‚úÖ Checks if a reboot is required (`/var/run/reboot-required`)  
‚úÖ Automatically reboots if necessary  

---

### **For CentOS/RHEL Users:**
Replace `apt update && apt upgrade -y` with:  
```bash
yum update -y
```

Let me know if you need modifications! üöÄ
------------------------------------------------------------------------------------------------------------------------
5.write script count no of line in all log files if spec dir

Here‚Äôs a **simple Bash script** to count the number of lines in all `.log` files in a specified directory.  

---

### **Script:**  
```bash
#!/bin/bash

# Directory containing log files
LOG_DIR="/path/to/logs"

# Check if directory exists
if [[ ! -d "$LOG_DIR" ]]; then
    echo "‚ùå Directory $LOG_DIR does not exist!"
    exit 1
fi

# Count lines in all .log files
echo "üìÑ Counting lines in log files..."
find "$LOG_DIR" -type f -name "*.log" -exec wc -l {} +

echo "‚úÖ Line count completed."
```

---

### **How to Use:**  
1. Save the script as `count_log_lines.sh`  
2. Replace **`/path/to/logs`** with the actual log directory  
3. Give execute permission:  
   ```bash
   chmod +x count_log_lines.sh
   ```
4. Run the script:  
   ```bash
   ./count_log_lines.sh
   ```

---

### **What This Script Does:**  
‚úÖ Checks if the specified directory exists  
‚úÖ Finds all `.log` files in the directory  
‚úÖ Counts the number of lines in each log file  
‚úÖ Displays the results  

Let me know if you need modifications! üöÄ
-----------------------------------------------------------------------------------------------------------------
6.write script that checks for presence of specific software on the sytem eg. docker, git install if it is missing

Here‚Äôs a **simple** Bash script to check and install **Docker** and **Git** if missing:  

```bash
#!/bin/bash

# Function to check and install a package
install_if_missing() {
    if ! command -v "$1" &> /dev/null; then
        echo "Installing $1..."
        apt install -y "$1"
    else
        echo "$1 is already installed."
    fi
}

# Run as root
if [[ $EUID -ne 0 ]]; then
    echo "Run this script as root!"
    exit 1
fi

# Update package list
apt update -y

# Check and install Git and Docker
install_if_missing git
install_if_missing docker.io

echo "‚úÖ Installation check completed."
```

### **How to Run:**  
```bash
sudo bash script.sh
```  

This keeps it **minimal and effective**. üöÄ
--------------------------------------------------------------------------------------------------------------
7.write script to check if the file whre live me so some file path esist it does display msg are disabled then
next check to see if you can write tofile if you can display . you have permission to edit file path if you cannot
display you do not have perrmission to edit the file path

‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§Ö‡§∏‡§æ Bash ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§™‡§æ‡§π‡§ø‡§ú‡•á ‡§Ü‡§π‡•á, ‡§ú‡•ã ‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä ‡§§‡§™‡§æ‡§∏‡•á‡§≤:

1Ô∏è‚É£ ‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§´‡§æ‡§à‡§≤‡§ö‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó (file path) ‡§Ö‡§∏‡•ç‡§§‡§ø‡§§‡•ç‡§µ‡§æ‡§§ ‡§Ü‡§π‡•á ‡§ï‡§æ?

‡§ú‡§∞ ‡§®‡§æ‡§π‡•Ä, ‡§§‡§∞ "File is missing" ‡§Ö‡§∏‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§¶‡§æ‡§ñ‡§µ‡•á‡§≤.
2Ô∏è‚É£ ‡§ú‡§∞ ‡§´‡§æ‡§à‡§≤ ‡§Ö‡§∏‡•ç‡§§‡§ø‡§§‡•ç‡§µ‡§æ‡§§ ‡§Ö‡§∏‡•á‡§≤, ‡§§‡§∞ ‡§§‡•Ä writable (‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§à‡§≤ ‡§ï‡§æ) ‡§Ü‡§π‡•á ‡§ï‡§æ?

‡§ú‡§∞ ‡§π‡•ã‡§Ø, ‡§§‡§∞ "You have permission to edit [file_path]" ‡§Ö‡§∏‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§¶‡§æ‡§ñ‡§µ‡•á‡§≤.
‡§ú‡§∞ ‡§®‡§æ‡§π‡•Ä, ‡§§‡§∞ "You do not have permission to edit [file_path]" ‡§Ö‡§∏‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§¶‡§æ‡§ñ‡§µ‡•á‡§≤.

#!/bin/bash

# Define the file path
FILE_PATH="/path/to/your/file"

# Check if the file exists
if [ -e "$FILE_PATH" ]; then
    echo "File exists: $FILE_PATH"
else
    echo "File does not exist: $FILE_PATH"
    exit 1
fi

# Check if the file is writable
if [ -w "$FILE_PATH" ]; then
    echo "You have permission to edit: $FILE_PATH"
else
    echo "You do not have permission to edit: $FILE_PATH"
fi
==================================================================================================================
