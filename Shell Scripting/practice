How to check if a user already exists in Linux.

Here‚Äôs a **simple Bash script** to check if a user exists in Linux:  

---

### **Script:**  
```bash
#!/bin/bash

# Define the username to check
USERNAME="kausar"

# Check if the user exists
if id "$USERNAME" &>/dev/null; then
    echo "‚úÖ User '$USERNAME' exists."
else
    echo "‚ùå User '$USERNAME' does not exist."
fi
```

---

### **How to Use:**  
1. **Save the script** as `check_user.sh`:  
   ```bash
   nano check_user.sh
   ```
   Paste the script inside and save it (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
   ```bash
   chmod +x check_user.sh
   ```

3. **Run the script:**  
   ```bash
   ./check_user.sh
   ```

---

### **What This Script Does:**  
‚úÖ Checks if the given user exists in the system.  
‚úÖ Uses `id` command for verification.  
‚úÖ Displays a success or failure message.  

Let me know if you need modifications! üöÄ
-------------------------------------------------------------------------------------------------------------------------------
How to create users automatically using Bash scripting.

Here‚Äôs a **simple Bash script** that automatically creates a user in Linux.  

---

### **Script:**
```bash
#!/bin/bash

# Define the username
USERNAME="newuser"

# Check if the user already exists
if id "$USERNAME" &>/dev/null; then
    echo "‚ùå User '$USERNAME' already exists!"
    exit 1
fi

# Create the user with a home directory
useradd -m -s /bin/bash "$USERNAME"

# Set a default password (change as needed)
echo "$USERNAME:Password@123" | chpasswd

# Force password reset on first login
passwd --expire "$USERNAME"

# Display success message
echo "‚úÖ User '$USERNAME' created successfully!"
```

---

### **How to Use:**  
1. Save the script as `create_user.sh`:  
   ```bash
   nano create_user.sh
   ```
   Paste the script inside and save (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
   ```bash
   chmod +x create_user.sh
   ```

3. **Run as root:**  
   ```bash
   sudo ./create_user.sh
   ```

---

### **What This Script Does:**  
‚úÖ Checks if the user **already exists**  
‚úÖ Creates a **new user** with a home directory  
‚úÖ Sets a **default password**  
‚úÖ Forces the user to **change password on first login**  

Let me know if you need modifications! üöÄ
-------------------------------------------------------------------------------------------------------------------------------
Random password generation with special characters.

Here‚Äôs a **simple Bash script** to generate a random password with special characters:  

---

### **Script:**
```bash
#!/bin/bash

# Generate a random password (12 characters with special characters)
PASSWORD=$(openssl rand -base64 12 | tr -d '/+=' | fold -w 12 | head -n 1)

# Display the generated password
echo "Generated Password: $PASSWORD"
```

---

### **How to Use:**  
1. Save the script as `generate_password.sh`:  
   ```bash
   nano generate_password.sh
   ```
   Paste the script inside and save (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
   ```bash
   chmod +x generate_password.sh
   ```

3. **Run the script:**  
   ```bash
   ./generate_password.sh
   ```

---

### **What This Script Does:**  
‚úÖ Uses `openssl` to generate a **secure** random password  
‚úÖ Ensures **special characters** are included  
‚úÖ Avoids problematic characters like `/`, `+`, and `=`  

üí° **Example Output:**  
```
Generated Password: GkP!3tB7mZ#2
```

Let me know if you need modifications! üöÄ
------------------------------------------------------------------------------------------------------------------------------------
How to force a password reset on the first login.

To **force a user to reset their password** on the first login in Linux, use the `passwd --expire` command.  

---

### **Manual Method:**  
Run the following command as root:  
```bash
sudo passwd --expire username
```
üîπ This will **force** the user to change their password upon next login.

---

### **Bash Script to Automate Password Reset:**  
Here‚Äôs a script to **create a new user** and **force a password reset** at first login.  

```bash
#!/bin/bash

# Define the username
USERNAME="newuser"

# Check if user already exists
if id "$USERNAME" &>/dev/null; then
    echo "‚ùå User '$USERNAME' already exists!"
    exit 1
fi

# Create the user with a home directory
useradd -m -s /bin/bash "$USERNAME"

# Set a default password (change as needed)
echo "$USERNAME:Password@123" | chpasswd

# Force password reset on first login
passwd --expire "$USERNAME"

echo "‚úÖ User '$USERNAME' created successfully!"
echo "üîë Password reset is required on first login."
```

---

### **How to Use:**  
1. **Save the script:**  
   ```bash
   nano force_password_reset.sh
   ```
   Paste the script inside and save (`Ctrl+X`, then `Y`, then `Enter`).

2. **Give execute permission:**  
   ```bash
   chmod +x force_password_reset.sh
   ```

3. **Run as root:**  
   ```bash
   sudo ./force_password_reset.sh
   ```

---

### **What This Script Does:**  
‚úÖ **Checks if the user exists**  
‚úÖ **Creates a new user** if not already present  
‚úÖ **Sets a default password**  
‚úÖ **Forces password change on first login**  

Let me know if you need modifications! üöÄ
---------------------------------------------------------------------------------------------------------------------------------------------------------
1.check the available free memory on the sytem and alert the user if it falls below a threshold en 10.

#!/bin/bash

THRESHOLD=10  # Set threshold in MB
FREE_MEM=$(free -m | awk '/Mem:/ {print $7}')  # Get free memory in MB

echo "Available Memory: $FREE_MEM MB"

if [[ $FREE_MEM -lt $THRESHOLD ]]; then
    echo "‚ö†Ô∏è WARNING: Low Memory!"
fi

-------------------------------------------------------------------------------------------------------------------------------
2.to automate the creation of new user specific permission and home dir

Here‚Äôs a **simple Bash script** to automate the creation of a new user with specific permissions and a home directory.  

---

### **Script:**
```bash
#!/bin/bash

# Check if the script is run as root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå This script must be run as root."
   exit 1
fi

# Set the username (Change as needed or take input)
read -p "Enter the new username: " USERNAME

# Create the user with a home directory
useradd -m -s /bin/bash "$USERNAME"

# Set a password for the user
echo "Set password for $USERNAME:"
passwd "$USERNAME"

# Set specific permissions for the home directory
chmod 750 /home/"$USERNAME"

# Add user to a specific group (optional)
usermod -aG sudo "$USERNAME"

echo "‚úÖ User $USERNAME created successfully with a home directory and permissions!"
```

---

### **How to Use:**
1. Save the script as `create_user.sh`
2. Give execute permission:  
   ```bash
   chmod +x create_user.sh
   ```
3. Run as root:  
   ```bash
   sudo ./create_user.sh
   ```
4. Enter the username and set a password when prompted.

---

### **What This Script Does:**
‚úÖ Creates a new user with a home directory  
‚úÖ Sets a password for the user  
‚úÖ Grants **read, write, and execute** permissions to the user (750 permissions)  
‚úÖ Optionally adds the user to the **sudo** group  

Let me know if you need changes! üöÄ
-----------------------------------------------------------------------------------------------------------------------------
3.write shell script to find all large files greater than 1gb in dir move them another dir

Here‚Äôs a **simple Bash script** to find all files larger than **1GB** in a directory and move them to another directory.  

---

### **Script:**
```bash
#!/bin/bash

# Source directory (where to search)
SOURCE_DIR="/path/to/source"

# Destination directory (where to move large files)
DEST_DIR="/path/to/destination"

# Ensure destination directory exists
mkdir -p "$DEST_DIR"

# Find files larger than 1GB and move them
find "$SOURCE_DIR" -type f -size +1G -exec mv {} "$DEST_DIR" \;

echo "‚úÖ All files larger than 1GB have been moved to $DEST_DIR."
```

---

### **How to Use:**
1. Save the script as `move_large_files.sh`
2. Replace **`/path/to/source`** and **`/path/to/destination`** with actual paths.
3. Give execute permission:  
   ```bash
   chmod +x move_large_files.sh
   ```
4. Run the script:  
   ```bash
   ./move_large_files.sh
   ```

---

### **What This Script Does:**
‚úÖ Searches for files **larger than 1GB** in the specified directory  
‚úÖ Moves them to the **destination folder**  
‚úÖ Creates the destination folder if it doesn‚Äôt exist  

Let me know if you need modifications! üöÄ
----------------------------------------------------------------------------------------------------------------
4.write script that automatically update all instlled pakege on system and rebot system if needed

Here‚Äôs a **simple Bash script** to automatically update all installed packages and reboot the system if needed.  

---

### **Script:**
```bash
#!/bin/bash

# Check if the script is run as root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå This script must be run as root."
   exit 1
fi

echo "üîÑ Updating all installed packages..."
apt update && apt upgrade -y

# Check if a reboot is required
if [ -f /var/run/reboot-required ]; then
    echo "‚ö†Ô∏è Reboot required! Restarting system..."
    reboot
else
    echo "‚úÖ System is up-to-date. No reboot needed."
fi
```

---

### **How to Use:**
1. Save the script as `update_and_reboot.sh`
2. Give execute permission:  
   ```bash
   chmod +x update_and_reboot.sh
   ```
3. Run as root:  
   ```bash
   sudo ./update_and_reboot.sh
   ```

---

### **What This Script Does:**
‚úÖ Updates all installed packages using `apt`  
‚úÖ Checks if a reboot is required (`/var/run/reboot-required`)  
‚úÖ Automatically reboots if necessary  

---

### **For CentOS/RHEL Users:**
Replace `apt update && apt upgrade -y` with:  
```bash
yum update -y
```

Let me know if you need modifications! üöÄ
------------------------------------------------------------------------------------------------------------------------
5.write script count no of line in all log files if spec dir

Here‚Äôs a **simple Bash script** to count the number of lines in all `.log` files in a specified directory.  

---

### **Script:**  
```bash
#!/bin/bash

# Directory containing log files
LOG_DIR="/path/to/logs"

# Check if directory exists
if [[ ! -d "$LOG_DIR" ]]; then
    echo "‚ùå Directory $LOG_DIR does not exist!"
    exit 1
fi

# Count lines in all .log files
echo "üìÑ Counting lines in log files..."
find "$LOG_DIR" -type f -name "*.log" -exec wc -l {} +

echo "‚úÖ Line count completed."
```

---

### **How to Use:**  
1. Save the script as `count_log_lines.sh`  
2. Replace **`/path/to/logs`** with the actual log directory  
3. Give execute permission:  
   ```bash
   chmod +x count_log_lines.sh
   ```
4. Run the script:  
   ```bash
   ./count_log_lines.sh
   ```

---

### **What This Script Does:**  
‚úÖ Checks if the specified directory exists  
‚úÖ Finds all `.log` files in the directory  
‚úÖ Counts the number of lines in each log file  
‚úÖ Displays the results  

Let me know if you need modifications! üöÄ
-----------------------------------------------------------------------------------------------------------------
6.write script that checks for presence of specific software on the sytem eg. docker, git install if it is missing

Here‚Äôs a **simple** Bash script to check and install **Docker** and **Git** if missing:  

```bash
#!/bin/bash

# Function to check and install a package
install_if_missing() {
    if ! command -v "$1" &> /dev/null; then
        echo "Installing $1..."
        apt install -y "$1"
    else
        echo "$1 is already installed."
    fi
}

# Run as root
if [[ $EUID -ne 0 ]]; then
    echo "Run this script as root!"
    exit 1
fi

# Update package list
apt update -y

# Check and install Git and Docker
install_if_missing git
install_if_missing docker.io

echo "‚úÖ Installation check completed."
```

### **How to Run:**  
```bash
sudo bash script.sh
```  

This keeps it **minimal and effective**. üöÄ
--------------------------------------------------------------------------------------------------------------
7.write script to check if the file whre live me so some file path esist it does display msg are disabled then next check to

Here‚Äôs a **simple Bash script** to check if a file exists at a given path. If it exists, it displays a message and moves to the next check.  

---

### **Script:**  
```bash
#!/bin/bash

# Define the file path to check
FILE_PATH="/path/to/your/file"

# Check if the file exists
if [[ -f "$FILE_PATH" ]]; then
    echo "‚úÖ File exists: $FILE_PATH"
else
    echo "‚ùå File does not exist: $FILE_PATH"
fi

echo "Proceeding to the next check..."
# Add additional checks or logic here if needed.
```

---

### **How to Use:**  
1. Replace `/path/to/your/file` with the actual file path you want to check.  
2. Save the script as `check_file.sh`.  
3. Give execute permission:  
   ```bash
   chmod +x check_file.sh
   ```
4. Run the script:  
   ```bash
   ./check_file.sh
   ```

---

### **What This Script Does:**  
‚úÖ Checks if the file exists at the given path  
‚úÖ Displays a message accordingly  
‚úÖ Proceeds to the next check  

Let me know if you need modifications! üöÄ
----------------------------------------------------------------------------------------------------------------
8.see if you can write tofile if you can display . you have permission to edit file path if you cannot display you

Here‚Äôs a **simple Bash script** to check if a file is writable. If writable, it displays a success message; otherwise, it informs the user that they lack permission.  

---

### **Script:**  
```bash
#!/bin/bash

# Define the file path
FILE_PATH="/path/to/your/file"

# Check if the file exists
if [[ -e "$FILE_PATH" ]]; then
    # Check if the file is writable
    if [[ -w "$FILE_PATH" ]]; then
        echo "‚úÖ You have permission to edit $FILE_PATH."
    else
        echo "‚ùå You do not have permission to edit $FILE_PATH."
    fi
else
    echo "‚ùå File does not exist: $FILE_PATH"
fi
```

---

### **How to Use:**  
1. Replace `/path/to/your/file` with the actual file path.  
2. Save the script as `check_write_permission.sh`.  
3. Give execute permission:  
   ```bash
   chmod +x check_write_permission.sh
   ```
4. Run the script:  
   ```bash
   ./check_write_permission.sh
   ```

---

### **What This Script Does:**  
‚úÖ Checks if the file exists  
‚úÖ Checks if the user has **write permission**  
‚úÖ Displays the appropriate message  

Let me know if you need modifications! üöÄ
--------------------------------------------------------------------------------------------------------
9.do not have perrmission to edit the file path

Here‚Äôs a **simple Bash script** that checks if you have permission to edit a file. If you **don‚Äôt have write access**, it will display a message stating that you don‚Äôt have permission.  

---

### **Script:**  
```bash
#!/bin/bash

# Define the file path
FILE_PATH="/path/to/your/file"

# Check if the file exists
if [[ -e "$FILE_PATH" ]]; then
    # Check if the file is writable
    if [[ -w "$FILE_PATH" ]]; then
        echo "‚úÖ You have permission to edit $FILE_PATH."
    else
        echo "‚ùå You do NOT have permission to edit $FILE_PATH."
    fi
else
    echo "‚ùå File does not exist: $FILE_PATH"
fi
```

---

### **How to Use:**  
1. Replace `/path/to/your/file` with the actual file path.  
2. Save the script as `check_edit_permission.sh`.  
3. Give execute permission:  
   ```bash
   chmod +x check_edit_permission.sh
   ```
4. Run the script:  
   ```bash
   ./check_edit_permission.sh
   ```

---

### **What This Script Does:**  
‚úÖ **Checks if the file exists**  
‚úÖ **Checks if you have write permission**  
‚úÖ **Displays an appropriate message**  

If you **don‚Äôt have permission**, try running with `sudo`:  
```bash
sudo ./check_edit_permission.sh
```

Let me know if you need modifications! üöÄ
------------------------------------------------------------------------------------------------------------------------------

