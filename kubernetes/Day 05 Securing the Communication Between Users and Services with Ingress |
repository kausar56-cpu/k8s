user - vote and result - frontend 
user - send -request - vote -it will return into redies - it will write to worker (.net)-  
worker based on result wite to database - database store - result -user 

------------------------------------------------------------------------------------------------------------------------------------
1. To Generate Secure Key and cert... Do we really use the `certbot` command in time????  or any Other alternative approach ?? 
2. If we use microservice architecture, do we create separate certs and key or only one cert and key is enough???

Good Question, actually in real-time they will have licensed keys, .crt, and .key. The only thing we have to do is,  
we have to follow the process that I showed in the video. 
Otherwise, there will be one common location where they run the key in that particular location. 

Now we donâ€™t use, only one.  We have 28 services we  use a single SSL key for all 28 services by configuring  
a load balancer or reverse proxy with the SSL certificate.
The load balancer then handles SSL termination and forwards traffic to the microservices.


--------------------------------------------------------------------------------------------------------------
ggeneratingTLS KEYS 
.crt and . key 
-------------------------------
keep all images in a private repo  
we pass docker cred in secret k8s
------------------------------------
Make sure our application able to download private images from a private repo. 
------------------------------------------------------------------------------
If u want to change the domain name - then u have to change all subdomains also - ugly microserver che ssl certificate change krave legal. 

ttasteconfigure alb krav label each and every microservicespatioi 
suppose mla Jun 2 mmicroserviceadd crochet tr Jun 2 lb configure krav legal 
and he single manually ahe and cost-effective 
ani yeuk lb update kela ani backache ny kel tr application bust hoilbackachee all serveinsecurehoteltil 
-----------------------------------------------------------------------------------------------------------------------------------------
When u configure the ingress controller in backen NLB create - NLB integrate with a domain - 

ingress controller
It is a piece of software that u going to install on the k8s cluster - it will write requests to ingress resources - 
based on request - it's going to route it -appropriately - to your application  
---------------------------------------------------------------------------------------------------------------------------------------------

create 2 instances 1 for cluster creating and 2. for sslgeneratingg 
1 ec2 - t2.medium  2. ec2 - t2 micro

---------------------------------------------------------------------------------------------------------------

on t2.miicro
take access 2.ec2 
sudo snap install --classic certbot
------------------------------------------------------------------------------------------------------------------
sudo certbot certonly --manual \
--preferred-challenges DNS \ 
--key-type rsa \
--email saikiran.mujawark56@gmail.com \
--server https://acme-v02.api.letsencrypt.org/directory \
--agree-to \ 
-d "*.kausarmujawar.shop"

----------------------------------------------------------------------------------------------------------------
Press 22 times enter then it will give us 2 certificate  
ACME-CHALLANGE 
3mQ_Jx6arEg_rUFMd107c{JDNs01Y-tu9busqheyt jo ----text record
COPY acme-change certificate go to rout53 --hosted zones--create it by domain--click on created hosted zone---crete record  A  & add ACME-CHALLANGEheree ---- 
record name -ACME-CHALLANGE
record type -TXT
value - copy -text record-pest
simple routing
wait up to status in sync

----------------------------------------------------------------------------------------------------------
After go the terminal see the certificate successfully received  
cert -we got the certificate saved location ---/etc/letsencrypt/live/cloudvishwakarma.in/fullchain.pem 
key saved at --- /etc/letsencrypt/live/cloudvishwakarma.in/private key.pem 
cat - cert 
cat key

------------------------------------------------------------------------------------------------------------------
on master
deploy ingress controller
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/aws/deploy.yaml
cd /tmp
nano tls .cert  
copy cert and pest
nano tls.key
copy pest key
---------------------------------------------------------------------------------------------------------------------------------------------

kubectl create secret tls nginx-tls-default --key="tls.key" --cert="tls.crt"
kubectl get secrets
kubectl describe nginx-tls-default
output like be  tls.key:
tis.crt:
1704 bytes
3590 bytes
------------------------------------------------------------------------------------------------------------------------------------------------

docker pull kiran2361993/testing:latestappresults
now push the image private docker repository 
so create private 1 firstly 
docker tag kiran2361993/testing:latestappresults kausar1011voting ap:results 
            public repo                                    private repo 
firstly I have to mention the public one then the private repository then tag----------imp 
docker push kausar1011/votingapp:results
------------------------------------------------------------------------------------------------------------------------------------------------------------------

now pull vote image 
docker pull kiran2361993/testing:latestappvote
docker tag kiran2361993/testing:latestappvote kausar1011/votingapp:vote
docker push kausar1011/votingapp:vote

-----------------------------------------------------------------------------------------------------------------------------------

now pull the BE image 
docker pull kiran2361993/testing:latestappworker
docker tag kiran2361993/testing:latestappworker kausar1011/votingapp:worker
docker push kausar1011/votingapp:worker

------------------------------------------------------------------------------------------------------------------------------
login hub
# Tag and push Docker images, then remove local images
docker rmi $(docker images -aq) --force

# Delete the existing deployment
kubectl delete deployment <your-deployment-name>

# Create a Docker registry secret 
kubectl create secret docker-registry docker-pwd \
    --docker-username=kausar1011 \
    --docker-password="a2F1c2FyMTAxMTpkY2tyX3BhdF9fRXhIUXJpRm02V3FzOGlFWU44Z0ttcGppczQ=" \
    --docker-email=mujawark56@gmail.com

 cat ~/.docker/config.json
to see token 

Deploy yaml file 
--------------------------------------------------
# redis
--- 
apiVersion: v1
kind: Service
metadata: 
  Labels:  
    app: redis
  name: redis
Spec:  
  cluster: None 
  Ports: 
  - name: redis-service
    port: 6379
    targetPort: 6379
  selector: 
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  Labels: 
    app: redis
Spec: 
  replicas: 1
  Selector: 
    matchLabels:
      app: redis
  Template: 
    Metadata: 
      Labels: 
        app: redis
    Spec: 
      Containers: 
      - name: redis
        image: redis: alpine 
        ports:
        - containerPort: 6379
          name: redis

# db
--- 
apiVersion: v1
kind: Service
metadata: 
 Labels:  
    app: db
  name: db
Spec:  
  cluster: None 
  Ports:  
  - name: db
    port: 5432
    targetPort: 5432
  selector: 
    app: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  Labels: 
    app: db
Spec: 
  replicas: 1
  Selector: 
    matchLabels:
      app: db
  Template: 
    Metadata: 
      Labels: 
        app: db
    Spec: 
      Containers: 
      - name: db
        image: postgres:9.4
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/bigdata 
        - name: POSTGRES_USER
          value:Postgress 
        - name: POSTGRES_PASSWORD
          value: Postgres 
        ports:
        - containerPort: 5432
          name: db
        volume mounts: 
        - name: db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: db-data
        emptyDir: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
   Requests: 
      storage: 1Gi

# result
---
apiVersion: v1
kind: Service
metadata:
  name: result
  Labels: 
    app: result
Spec: 
  #type: LoadBalancer
  Ports: 
  - port: 80
    targetPort: 80
    name: result-service
  selector:
    app: result

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result
  Labels: 
    app: result
Spec: 
  replicas: 1
  Selector: 
    matchLabels:
      app: result
  Template: 
    Metadata: 
      Labels: 
        app: result
    Spec: 
      Containers: 
      - name: result
        image: kausar1011/votingapp:results
        ports:
        - containerPort: 80
          name: result
      imagePullSecrets:
      - name: docker-pwd
# vote
---
apiVersion: v1
kind: Service
metadata:
  name: vote
  Labels: 
    apps: vote
Spec: 
  #type: LoadBalancer
  Ports: 
    - port: 80
      targetPort: 80
      name: vote-service
  selector:
    app: vote
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote
  Labels: 
    app: vote
Spec: 
  replicas: 2
  Selector: 
    matchLabels:
      app: vote
  Template: 
    Metadata: 
      Labels: 
        app: vote
    spec:
      containers:
      - name: vote
        image: kausar1011/votingapp:vote
        ports:
        - containerPort: 80
          name: vote
      imagePullSecrets:
      - name: docker-pwd

# worker
--- 
apiVersion: v1
kind: Service
metadata: 
  Labels:  
    apps: worker
  name: worker
Spec:  
  cluster: None 
  Selector:  
    app: worker
--- 
apiVersion: apps/v1
kind: Deployment
metadata: 
  Labels:  
    app: worker
  name: worker
Spec:  
  replicas: 1
  Selector: 
    matchLabels:
      app: worker
  Template:  
    Metadata:  
      Labels:  
        app: worker
    Spec:  
      Containers:  
      - image: kausar1011/votingapp:worker
        name: worker
      imagePullSecrets:
      - name: docker-pwd
--------------------------------------------------------------------------------------------------------------------------------

      ------------------------------------------------------------------------------------------------------------------------------
     Go to rout53 - crete recorded A - simplerecordd -recorded name www-  alias - network lb watchvideoo 

     ----------------------------------------------------------------------------------------------------
     deploy ingress.yaml 

     apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: result-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    spec.ingressClassName: nginx 
#  changed - as it is deprecated "kubernetes.io/ingress.class" Specc: 
  ts: 
  - hosts:
    - "result.c loudvishwakarma.in" 
    secret name: nginx-tls-default 
  rules:
  - host: result .cloudvishwakarma.in 
    http:
    Pathshs: 
      - path: /
        pathotype: Prefix 
        backend:
         Servicee: 
            name: result
            port:
              number: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  Annotations: 
    nginx.ingress.kubernetes.io/rewrite-target: /
    spec.ingressClassName: nginx
Spec: 
  ts: 
  - hosts:
    - "vote.c loudvishwakarma.in" 
    - "www.cloudvishwakarma.in"
    secret name: nginx-tls-default 
  rules:
  - host: vote .cloudvishwakarma.in 
    http:
    Pathshs: 
      - path: /
        pathotype: Prefix 
        backend:
         Servicee: 
            name: vote
            port:
              number: 80
  - host: www.cloudvishwakarma.in
    http: 
      Paths: 
      - path: /
        pathotype: Prefix 
        backend:
         Servicee: 
            name: vote
            port:
              number: 80

---





ingress resource
