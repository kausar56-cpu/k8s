user - vote and result - frentend
user - send -request - vote -it will return into redies - it will writte to worker (.net)- 
worker based on result wite to database - database sotre - result -user



--------------------------------------------------------------------------------------------------------------
genrating TLS KEYS
.crt and . key 
-------------------------------
keep all imges in private repo 
we pass docker cred in secret k8s
------------------------------------
make sure our application able to download private images from private repo
------------------------------------------------------------------------------
if u want change domain name - then u have to change all subdomain also - sglya microserver che ssl cirtificate change krave lagtil

tyasati configure alb krav lagel each and evry microservies pashi
suppose mla ajun 2 microservise add krychet tr ajun 2 lb configure krav lagel
ani he sgle manualy ahe and cost effective
ani yek lb update kela ani bakiche ny kel tr application bust hoil bakiche all server insecre hotil
-----------------------------------------------------------------------------------------------------------------------------------------
when u configure ingress controllar in backen NLB crete - NLB integrate with domain -

ingress controller
its pice of software where u going to install on k8s cluster - it will writr request to ingress resourse -
based on request - its going to route it - appropatily - to your application 
---------------------------------------------------------------------------------------------------------------------------------------------

create 2 instance 1 for cluster creating and 2. for ssl genrating
1 ec2 - t2.medium  2. ec2 - t2 micro

---------------------------------------------------------------------------------------------------------------

on t2.miicro
take access 2.ec2 
sudo snap install --classic certbot
------------------------------------------------------------------------------------------------------------------
sudo certbot certonly --manual \
--preferred-challenges dns \
--key-type rsa \
--email saikiran.mujawark56@gmail.com \
--server https://acme-v02.api.letsencrypt.org/directory \
--agree-tos \
-d "*.kausarmujawar.shop"

----------------------------------------------------------------------------------------------------------------
press 2time enter then it will give us 2 cirtificate 
ACME-CHALLANGE 
3mQ_Jx6arEg_rUFMd107c{JDNs01Y-tu9busqheyt jo ----text record
COPY acme-change cirtificate go to rout53 --hosted zones--create it by domain--click on creted hosted zone---crete record  A  & add ACME-CHALLANGE heare ----
record name -ACME-CHALLANGE
record type -TXT
value - copy -text record-pest
simple routing
wait up to status insync

----------------------------------------------------------------------------------------------------------
after go terminal see cirtificate succussfully recived 
cert -we got cirtificate saved location ---/etc/letsencrypt/live/cloudvishwakarma.in/fullchain.pem
key saved at --- /etc/letsencrypt/live/cloudvishwakarma.in/privatekey.pem
cat - cert 
cat key

------------------------------------------------------------------------------------------------------------------
on master
deploy ingress controller
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/aws/deploy.yaml
cd /tmp
nano tls.cert 
copy cert and pest
nano tls.key
copy pest key
---------------------------------------------------------------------------------------------------------------------------------------------

kubectl create secret tls nginx-tls-default --key="tls.key" --cert="tls.crt"
kubectl get secrets
kubectl describe nginx-tls-default
output like be  tls.key:
tis.crt:
1704 bytes
3590 bytes
------------------------------------------------------------------------------------------------------------------------------------------------

docker pull kiran2361993/testing:latestappresults
now push image private docker repository
so crete private 1 firstly
docker tag kiran2361993/testing:latestappresults kausar1011/votingapp:results
            public repo                                      privete repo
firstly i have to mention public one then private repostry then tag----------imp
docker push kausar1011/votingapp:results
------------------------------------------------------------------------------------------------------------------------------------------------------------------

now pull vote image 
docker pull kiran2361993/testing:latestappvote
docker tag kiran2361993/testing:latestappvote kausar1011/votingapp:vote
docker push kausar1011/votingapp:vote

-----------------------------------------------------------------------------------------------------------------------------------

now pull BE image
docker pull kiran2361993/testing:latestappworker
docker tag kiran2361993/testing:latestappworker kausar1011/votingapp:worker
docker push kausar1011/votingapp:worker

------------------------------------------------------------------------------------------------------------------------------
login hub
# Tag and push Docker images, then remove local images
docker rmi $(docker images -aq) --force

# Delete the existing deployment
kubectl delete deployment <your-deployment-name>

# Create Docker registry secret
kubectl create secret docker-registry docker-pwd \
    --docker-username=kausar1011 \
    --docker-password="a2F1c2FyMTAxMTpkY2tyX3BhdF9fRXhIUXJpRm02V3FzOGlFWU44Z0ttcGppczQ=" \
    --docker-email=mujawark56@gmail.com

 cat ~/.docker/config.json
to see token 

deploy yaml file
--------------------------------------------------
# redis
--- 
apiVersion: v1
kind: Service
metadata: 
  labels: 
    app: redis
  name: redis
spec: 
  clusterIP: None
  ports:
  - name: redis-service
    port: 6379
    targetPort: 6379
  selector: 
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
          name: redis

# db
--- 
apiVersion: v1
kind: Service
metadata: 
  labels: 
    app: db
  name: db
spec: 
  clusterIP: None
  ports: 
  - name: db
    port: 5432
    targetPort: 5432
  selector: 
    app: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres:9.4
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        ports:
        - containerPort: 5432
          name: db
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: db-data
        emptyDir: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# result
---
apiVersion: v1
kind: Service
metadata:
  name: result
  labels:
    app: result
spec:
  #type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    name: result-service
  selector:
    app: result

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result
  labels:
    app: result
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
      - name: result
        image: kausar1011/votingapp:results
        ports:
        - containerPort: 80
          name: result
      imagePullSecrets:
      - name: docker-pwd
# vote
---
apiVersion: v1
kind: Service
metadata:
  name: vote
  labels:
    apps: vote
spec:
  #type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      name: vote-service
  selector:
    app: vote
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote
  labels:
    app: vote
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
      - name: vote
        image: kausar1011/votingapp:vote
        ports:
        - containerPort: 80
          name: vote
      imagePullSecrets:
      - name: docker-pwd

# worker
--- 
apiVersion: v1
kind: Service
metadata: 
  labels: 
    apps: worker
  name: worker
spec: 
  clusterIP: None
  selector: 
    app: worker
--- 
apiVersion: apps/v1
kind: Deployment
metadata: 
  labels: 
    app: worker
  name: worker
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template: 
    metadata: 
      labels: 
        app: worker
    spec: 
      containers: 
      - image: kausar1011/votingapp:worker
        name: worker
      imagePullSecrets:
      - name: docker-pwd
--------------------------------------------------------------------------------------------------------------------------------

      ------------------------------------------------------------------------------------------------------------------------------
     go to rout53 - crete recored A - simple recored -recored name www-  alias - network lb watch vedio

     ----------------------------------------------------------------------------------------------------
     depoly ingress.yaml

     apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: result-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    spec.ingressClassName: nginx
#  changed - as it is depracted "kubernetes.io/ingress.class"
spec:
  tls:
  - hosts:
    - "result.cloudvishwakarma.in"
    secretName: nginx-tls-default
  rules:
  - host: result.cloudvishwakarma.in
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: result
            port:
              number: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    spec.ingressClassName: nginx
spec:
  tls:
  - hosts:
    - "vote.cloudvishwakarma.in"
    - "www.cloudvishwakarma.in"
    secretName: nginx-tls-default
  rules:
  - host: vote.cloudvishwakarma.in
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vote
            port:
              number: 80
  - host: www.cloudvishwakarma.in
    http: 
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vote
            port:
              number: 80

---





ingress resource
