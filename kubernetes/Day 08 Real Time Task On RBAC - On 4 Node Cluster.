create ca.crt and ca.key
crte user 
add this user in kube config file 
then crete role and bind




What is kubectx?
kubectx is a CLI tool that simplifies switching between multiple Kubernetes contexts in a kubeconfig file. 
Instead of using kubectl config use-context, you can use a short and quick command.

ðŸ”¹ Why Use kubectx?
âœ… Quickly switch between Kubernetes contexts
âœ… Easier than using kubectl config use-context
âœ… Lists available contexts for easy selection

âœ… Generated certs for user1 & user2 using ca.crt & ca.key
âœ… Created kubeconfig for both users
âœ… Defined Role (namespace-specific) & RoleBinding
âœ… Assigned correct permissions (e.g., get, list, create)
âœ… Tested access with kubectl auth can-i

---------------------------------------------------------------------------------------------------------------------------------------------
1 ] dev - user1 - 1. ca.crt 2. ca.key
    prod - user2 -  1. ca.crt 2. ca.key
     1. ca.crt 2. ca.key with help of this keys i will create 2 user

 2] then we are going to crete configs - in that we will call key uder /root/file  - just for authentication betwween multiple server most secure way

3] roles - rules - apigrups /resources (pod.dep, rc) - under resurce -verbs (grt , update,crete)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
gentrate key
before creting cluster
ssh-keygen
--------------------------------------------------------------------------------------------------------------------------------------------------------------
kubectl create ns development

kubectl create ns production


If you want to generate and store your **CA certificate (ca.crt) and private key (ca.key)** under `/etc/kubernetes/pki/` after creating a cluster, follow these steps.

---

## **âœ… Step 1: Generate the CA Key and Certificate**
Run these commands on your control plane node (or primary master node in a self-managed Kubernetes cluster).

### **ðŸ”¹ Navigate to the PKI Directory**
```sh
sudo mkdir -p /etc/kubernetes/pki
cd /etc/kubernetes/pki
```

### **ðŸ”¹ Generate the CA Private Key (ca.key)**
```sh
sudo openssl genrsa -out ca.key 2048
```

### **ðŸ”¹ Create a Self-Signed CA Certificate (ca.crt)**
```sh
sudo openssl req -x509 -new -nodes -key ca.key -sha256 -days 365 \
    -out ca.crt -subj "/CN=kubernetes-ca"
```

---

## **âœ… Step 2: Set Correct Permissions**
Ensure the private key is **secure** and accessible **only by root**:
```sh
sudo chmod 600 ca.key
sudo chmod 644 ca.crt
sudo chown root:root ca.*
```

---

## **âœ… Step 3: Verify the Files**
Run these commands to check that the files were created correctly:
```sh
ls -lah /etc/kubernetes/pki/
openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -text
```

---

## **âœ… Step 4: Restart Kubernetes Components (if needed)**
If you need Kubernetes to recognize the new CA, restart the **control plane components**:
```sh
sudo systemctl restart kube-apiserver
sudo systemctl restart kube-controller-manager
sudo systemctl restart kube-scheduler
```

---

## **ðŸš€ Next Steps: Sign Certificates for Kubernetes Components?**
If you need to generate **kube-apiserver, kubelet, or user certificates** signed by this CA, let me know! ðŸš€
 
---------------------------------------------------------------------
on node

/tmp
nano ca.crt
nano ca.key

openssl genrsa -out user1.key 2048
openssl req -new -key user1.key -out user1.csr -subj "/CN=user1/O=development"
openssl x509 -req -in user1.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out user1.crt -days 365


openssl genrsa -out user2.key 2048
openssl req -new -key user2.key -out user2.csr -subj "/CN=user2/O=production"
openssl x509 -req -in user2.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out user1.crt -days 365

Now copy all .crt and .key to master root location safely.
 you need to copy the .crt and .key files from the master to the worker node.

nano user1.crt
nano user1.key
nano user2.crt
nano user2.key
------------------------------------------------------------------------------------------------------------------
 cd ~/. kube/
ls -al
cat config

apiVersion: v1
kind: Config
clusters:
- name: kausarmujawar.shop
  cluster:
    certificate-authority-data: LSetLS1CRUdJTiBDRVJUSUZJQ8FURS... (your actual CA data here)
    server: https://api.kausarmujawar.shop
    tls-server-name: api.internal.kausarmujawar.shop

contexts:
- name: user1-context
  context:
    cluster: kausarmujawar.shop
    namespace: development
    user: user1

current-context: user1-context

users:
- name: user1
  user:
    client-certificate: /root/user1.crt
    client-key: /root/user1.key




------------------------------------------------------------------------------------------------------------------------------------------

#USER-1


apiVersion: v1
kind: Config
clusters:
- name: kausarmujawar.shop
  cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJY1ExK3NhOUR1UTh3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeU1UQXdORFUyTWpWYUZ3MHpOVEF5TURnd05UQXhNalZhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURzRjJjbjBuaGlwOUh4TFdxa3dNTURpaXZtZUE5YkVFaFVCSEEveDU0NGtzN2ZFc25EVE5OVU1JVWcKNWpMNzRzNkZjSUNaUWdmL295cFpPZyswUHhQZHBEL3JaL1dqblo5K3dOOFZtbStLcklQMm1DU3dQNG5RdWZSWApRNEpZQXFUdy96M240MHBhWlpTMzlDWnhHU0xFY29JV0FuOXlIdS9sMW16NDM5blpoUnRtMmZiN3ozdFI4WEo2CnVXU0g0MklHcVZWNVRkalUrL1B6K3dFbHdnMVpwU085S3pvczBOMWpNak53Zm1SNVNoamRmYldyb1dISjlUMXkKWDkxclJQbndjQnBMcDN5aTJBVXBpNWZ3M240L3hzaC84eWpnK1VLalpUT3ZMcUhzSTgyUzZYdXNQNUF4bStPQwo4T1QyK3RaSlBQclB0WTErY1RmOTQ2M0YzUXI5QWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJTVU5tTGhtZFNhMUJycnNpWHhWcHBXYXBQL0JUQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ1JYakE5QUJxUAo1Wi9GUFRITldWZmJNU3BwVEtoNEFPeVhkMlRHMFpLeExKTkZlUFN3U2tFMXBkcHpONjVIS0ZHaVFLSjZLVldGCmtHRU1YYnU0bnBxODhOd1BsUXhoYjBhTXR5aVNiZ3ZMQTlCb0M3dU5HZml1VWpPbWpPTDJzNG5LdEMwT3ZwM3YKWHBRSE1ySUZZeTA1djZnTU9Jd0lDdUw5bFlKQ1Fab1E1SzhzaHNGZVdMRUtPSDA5WlhQUEhNV0ZzclpuNzlGVwpQOWFKRXZVOG1mcCtLYnFTaS9SKzFpaEFqWjRDVEM5bjB3cHRtY1ZuUGltUktHWHY5WGtlQzErY3Y1NVN5Z0I2Citidzc2aDZ2OTlMZThOSlZsWi93cmdEYjg5UG8xTS9USTlMY0FybVdlYmd1UjF3WGwvWVBPbEhhdzdobHhWTi8KTG5MNGhIOTNGMkNHCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: https://16AB23D8C7BD3508855BA2CB85FAE8F5.gr7.us-east-1.eks.amazonaws.com

contexts:
- name: user1-context
  context:
    cluster: kausarmujawar.shop
    namespace: development
    user: user1

current-context: user1-context

users:
- name: user1
  user:
    client-certificate: /root/user1.crt
    client-key: /root/user1.key


nano /root/USER1-CONFIG
export KUBECONFIG=/root/USER1-CONFIG
kubectl get pods
------------------------------------------------------------------



user2

nano /root/USER1-CONFIG
export KUBECONFIG=/root/USER1-CONFIG

apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LSÂ®tLS1CRUdÐ­TiBDRVJUSUZJQ@FURS@tLS@tCk1JSUMÐ³RENDQWVDZ@F3SUJBZ@1NRitrSHg2L0pFMkE3RHZzSU1BMEdDU:
    server: https://api.kausarmujawar.shop
    tls-server-name: api.internal.kausarmujawar.shop
  name: kausarmujawar.shop
contexts:
- context:
    cluster: kausarmujawar.shop
    namespace: production
    user: user2
  name: user2-context
current-context: user2-context
kind: Config
users:
- name: user2
  user:
    client-certificate: /root/user2.crt
    client-key: /root/user2.key
----------------------------------------------------------------------------------------------------------------------
CRETE ROLE AND DEPLOY

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: user1-role
  namespace: development
rules:
- apiGroups: ["", "apps", "networking.k8s.io"] # Use "" for core API group
  resources:
    - "pods"
    - "deployments"
    - "nodes"
    - "ingress"
    - "services"
  verbs: ["get", "update", "list", "create", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: user2-role
  namespace: production
rules:
- apiGroups: ["", "apps", "networking.k8s.io"] # Use "" for core API group
  resources:
    - "pods"
    - "deployments"
    - "replicasets"
    - "nodes"
    - "ingress"
    - "services"
  verbs: ["get", "update", "list", "create", "delete"]

apply it

kubectl api-resources --namespaced=true
sgle kind distil ani trule vale ns vr apply hotat
false apply on cluster level
-------------------------------------------------------------------------------------------------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user1-rolebinding
  namespace: development
subjects:
- kind: User
  name: user1
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: user1-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user2-rolebinding
  namespace: production
subjects:
- kind: User
  name: user2
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: user2-role
  apiGroup: rbac.authorization.k8s.io
---------------------------------------------------------------------------------------
kubectl get rolebindings.rbac.authorization.k8s.io -n production
kubectl get rolebindings.rbac.authorization.k8s.io -n devlopment

export KUBECONFIG=/root/USER1-CONFIG
kubectl get pods
---------------------------------------------------------
kubectl create deployment my-deployment --image=nginx --replicas=2 -n development
--------------------------------------------------------------------------
openssl genrsa -out saikiran.key 2048
openssl req -new -key saikiran.key -out saikiran.csr -subj "/CN=saikiran/O=clusteradmin"
openssl x509 -req -in saikiran.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out saikiran.crt -days 365

cat saikiran.crt
copy
nano saikiran.crt
nano saikiran.key

apiVersion: v1
kind: Config
clusters:
- name: cloudvishwakarma.in
  cluster:
    certificate-authority-data: LSetLS1CRUdJTiBDRVJUSUZJQ8FURS0tLS@tCk1JSUMrRENDQ
    server: https://api.cloudvishwakarma.in
    tls-server-name: api.internal.cloudvishwakarma.in

contexts:
- name: saikiran-context
  context:
    cluster: cloudvishwakarma.in
    user: saikiran

current-context: saikiran-context

users:
- name: saikiran
  user:
    client-certificate: /root/saikiran.crt
    client-key: /root/saikiran.key

apply it

export KUBECONFIG=/root/SAIKIRAN-CONFIG
kubectl get pods


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: new-cluster-admin-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clusterrolebinding-saikiran
subjects:
- kind: User
  name: saikiran
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: new-cluster-admin-role
  apiGroup: rbac.authorization.k8s.io

-----------------------------------------------------------------------
kubeconfing merging

KUBECONFIG=USER1-CONFIG:USER2-CONFIG:SAIKIRAN-CONFIG kubectl config view --merge --flatten > mixed-config.txt
ls -al
export KUBECONFIG=/root/mixed-config.txt

download kubectx
cd /usr/local/bin/

wget https://github.com/ahmetb/kubectx/releases/download/v0.9.5/kubectx_v0.9.5_linux_x86_64.tar.gz
tar -xvzf kubectx_v0.9.5_linux_x86_64.tar.gz
kubectx

Yes! âœ… Merging is needed because managing 100 separate kubeconfig files is difficult. It makes switching between users easier. ðŸš€


--------------------------------------------------------------------------------------------------------------------------

Portainer Kubernetes GitHub
kubectl apply -f https://raw.githubusercontent.com/portainer/k8s/master/deploy/manifests/portainer/portainer.yaml
kubens portainer
kubectl get pods 
kubectl get svc
access it



