8000:80
8000 - host port
80 - container port
by using config map we can change default conatiner port
----------------------------------------------------------
secrets
1.TLS
2.Registory
3. genric
4.ENV variable
5. volume mount - when u passing secrit by volume mount |if u are inside conatine 
u cannot be able to pass |becoz pass or cred mouted perticulat file .aws/credentioals at root location 

whenever we see at last = thens its base64 encoded
-------------------------------------------------------------------------------------------------------------------
mkdir registery
cd registery/

go to hub crete private repo configsecrets
docker pull kiran2361993/troubleshootingtools
docker tag kiran2361993/troubleshootingtools:v1 kausar1011/configsecrets:v1
docker login
docker push kausar1011/configsecrets:v1

kubectl create deployment appl --image=kausar1011/configsecrets:v1 --replicas=3 --dry-run=client -o yaml
apply it

kubectl create secret docker-registry docker-pwd \
  --docker-server=docker.io \
  --docker-username=kausar1011 \
  --docker-password='your-docker-password' \
  --docker-email=kausar786@gmail.com


apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels:
    app: app1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
        - name: configsecrets
          image: kiran2361993/configsecrets:v1
      imagePullSecrets:
        - name: docker-pwd  # Removed extra space
apply it
delete all
-------------------------------------------------------------------------

genric
mkdir generic
cd
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels:
    app: app1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
        - name: configsecrets
          image: kiran2361993/troubleshootingtools:v1
apply it
login in pod 
kubectl exec -it 
aws s3 ls
delete deployment above

go to iam - crte user - apply ec2 full permission and s3 -attch it - crte access key and secrte key

kubectl create secret generic db-user --from-literal=username=devuser
kubectl create secret generic db-pass --from-literal=password='S!B\*d$zDsb='

kubectl describe secret db-pass
kubectl describe secret db-user

kubectl get secret db-user -o jsonpath="{.data.username}" | base64 --decode
kubectl get secret db-pass -o jsonpath="{.data.password}" | base64 --decode

echo -n "AKIATCKASV70BQMFSNN7" | base64
echo -n "TJ2sEdJqkEm09ziQ5uVR17osIupm/aCxKqSe4bAl" | base64



apiVersion: v1
kind: Secret
metadata:
  name: aws-access-keys
type: Opaque
data:
  AWS_ACCESS_KEY_ID: QUEJQVRDS0FTVjdPQ1BSR1hWT1E=
  AWS_SECRET_ACCESS_KEY: NÂº1qMjZ4MHdKREIxZStPOXkrUDR2SkZhM3YxNVRWVUpVazMvbGE1UQ==


apiVersion: apps/v1
kind: Deployment
metadata:
  name: awscli-deployment
  labels:
    app: awscli
spec:
  replicas: 1
  selector:
    matchLabels:
      app: awscli
  template:
    metadata:
      labels:
        app: awscli
    spec:
      containers:
      - name: awscli
        image: kiran2361993/troubleshootingtools
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-access-keys
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-access-keys
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"  # Corrected syntax


    apply it
kubectl describe secret aws-access-keys
kubectl exec -it
delete all
-----------------------------------------------------------------------------------------------------------------------------
file mount

apiVersion: v1
kind: Secret
metadata:
  name: aws-creds-in-file
type: Opaque
stringData:
  credentials: |
    [default]
    aws_access_key_id = AKIATCKASV70BQMFSNN7
    aws_secret_access_key = 7Ij26x0wJDB1e+09y+P4vJFa3v15TVUJUk3/1a5Q
---

apiVersion: v1
kind: Pod
metadata:
  name: secret-test-pod-1
spec:
  containers:
    - name: aws-cli-container
      image: kiran2361993/troubleshootingtools:v1
      volumeMounts:
        - name: secret-volume
          mountPath: /root/.aws/credentials  # Fixed path
          subPath: credentials
          readOnly: true
  volumes:
    - name: secret-volume
      secret:
        secretName: aws-creds-in-file


apply it both 
kubectl get secrets 
kubectl describe secrets 
kubectl get pods
lgin pod
cannot able to pass
we are mounting it perticular dir we are not passing as env variable  kut mount kley 
/root./aws/cred
ls -al hit file dile in and check it
----------------------------------------------------------------------------------------------------------------------------
configmap

mkdir configmaps
cd
nano default.config

server {
    listen 9999;
    server_name localhost;

    access_log /var/log/nginx/host.access.log main;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
    }

    # Error Page Configuration
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # Pass PHP scripts to FastCGI server
    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
        include fastcgi_params;
    }

    # Deny access to .htaccess files
    location ~ /\.ht {
        deny all;
    }
}

kubectl create configmap default-conf --from-file=default.conf


apiVersion: apps/v1
kind: Deployment
metadata:
  name: newnginx
  labels:
    app: newnginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: newnginx
  template:
    metadata:
      labels:
        app: newnginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: nginxconfvol
          mountPath: "/etc/nginx/nginx.conf"
          subPath: default.conf
      volumes:
      - name: nginxconfvol
        configMap:
          name: default-config
apply it
expose it
kubectl expose deployment newnginx --port=80 --target-port=9999 --type=NodePort











