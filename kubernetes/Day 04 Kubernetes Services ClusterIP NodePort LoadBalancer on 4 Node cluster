cluster ip

devopler give an task to test application local env 
cluster ip does have also capability routing traffic to diff diff pods 
it can balnce load accurdingly it follows round robin method 
route traffic across multiple pods by using iptables
-----------------------------------------------------------------------------------------
node port

if we crete node port dont thing cluster ip not there cluster ip present at backend
uniq host port will cretate between 30000:32667
we can crte anyone special yes we can during manifest yaml file
nodeport do nating internally once this part done it will writing to cluster ip
------------------------------------------------------------------------------------------
node port is not use case for production application
load balncing is good for production
custermer/user - we cannot give public ip:port
evry thime they are going to remember this
------
so we are suppose give proper DNS name - domain name 
------------------------------------------------------------------------------------------------
external name     --------------------------vimp

i am working on k8s application - suddenly product maneger came - can u integrate database to k8s application  - this an external database not from other resion
this database access all teams becoz 
it contains product info
custmer feedback
reviews
---------------------
adv. of integrating database to k8s is database haing host name , uniq URL 
dtabase admin - he came back to devops guy - we are migrating database sever to another server 
next time url and host name intergated with many application 29 - aftermigration host name and url will change - 
devops engg dont need to change manuall 29 application host name and url 
simple devops engg change host name and url in external name
it will be apply rest all application
---------------------------------------------------------------------------------------------------------------------------------------------------------------
cluster ip


ku create deployment app1 --image kiran2361993/loadbalncerimage:v1 --replicas 3 --dry-run -o  y

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels:
    app: app1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
        - name: loadbalancerimage
          image: kiran2361993/loadbalancerimage:v1
apply it
--------------------------------
expose it 
ku expose deployment app1 --port 80 --target-port 80 --type ClusterIp

kubectl run troubleshooting --image=kiran2361993/troubleshootingtools:v1

login in that and access pod with help of cluster ip 

kubectl exec -it troubleshooting -- bash

nslookup app1

to check it is doing balncing or not
while true; do 
  curl -sL http://appl | grep -i 'IP Address'; 
  sleep 1; 
done

ku delete svc app1
delete deployment
-------------------------------------------------------------
in real time container will not be having each and every pakege whaterver we required thats
why cret one trobleshoting conatiner which conatin all dependency or pakeges    ---------------resume point
ctl+siftp ---fomat doc in vs code

------------------------------------------------------------------------------------------------------------------------------------------------------------------

nodeport 

ku create deployment app1 --image kiran2361993/kubegame:v2 --replicas 3 --dry-run -o yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: appl
  labels:
    app: appl
spec:
  replicas: 3
  selector:
    matchLabels:
      app: appl
  template:
    metadata:
      labels:
        app: appl  # Ensure label matches the selector
    spec:
      containers:
        - name: kubegame
          image: kiran2361993/kubegame:v2

deploy it
expose it

ku expose deployment appl --port 80 --target-port 80 --type NodePort

configure sg
access it 
delete svc only 
---------------------------------------------------------------------------------------------------------------------------------------
load balncer

ku expose deployment appl --port 80 --target-port 80 --type LoadBalancer

-----------------------------------------------------------------------------------------------------------------------------------------
opn rote53 - attach dns name it - crte record - simple routing - www - ip4 - load balncer - us-east-1 - 
---------------------------------------------------------------------------------------------------------------------------------------




















