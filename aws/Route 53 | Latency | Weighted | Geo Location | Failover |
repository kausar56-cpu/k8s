Hosting a website on AWS EC2 instances requires ensuring constant availability for users, even if some instances fail. Route 53
employs health checks to monitor instance health and automatically directs traffic away from unhealthy instances, ensuring a seamless user experience. 

#### Route53 Routing Policies:
*Latency:* Route traffic to the AWS region with the lowest latency, enhancing application performance by minimizing response time for users.
*Weighted:* Ideal for load balancing traffic between different versions of a website, gradually rolling out new features to a percentage of users.
*Failover:* Automatically redirects traffic to a secondary server if the primary server fails.
*Geo-Location:* Allows routing traffic based on the geographic location of users, optimizing performance and compliance.



----------------------------------------------------------------------------------------------------------------------------------------------------
How do we know a particular instance is down, and now the load has to switch on another instance.

route 53 policy
failover routing policy(failback policy or primary and secondary policy) 
health check will check whether each 10-sec application is running or not if not, the traffic will shift to another policy 
------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
create instance -create ami- install nginxcreatete ami copy Mumbaibai region 
create healthy check-in route 53- select tpc-  
route53 - creating a record - select type - failover -    ------imp 
create failover record  
2 sever creted - if one off trafic will trasfer to other

--------------------------------------------------
to check which server traffic flow 
i=0
while true, do 
  COUNT=$(curl -s http://failover.cloudviohsakarma.in | grep -oP '(?<=server: )\d+')
  echo "The Count value is $COUNT"
  sleep 10  # Wait for 10 seconds before checking again
done
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
latency

let's suppose the webserver and user 
user is trying to access Webserver  
time is taken to paket reached to webserver 
and web response the user is called latency 


to increase the performance of application ----use case  
------------------------------------------------------------------------------------------------------------------------------------------------------
route 53 - latency - crete record - define latency record 
do it for another record 
----------------------------------------------------------------------------------------------------------------------------------------

weighted policy
some traffic will flow to Mumbai and some us-east 
 
--------------------------------------------------------------------------------------------------------------------------------------------------------- 
geolocation 
it strictly follows the IP  
Europe and jjoinperpole send traffic self country only 
-----------------------------------------------------------------------------------------------------------------------







