nv mde dev and testing env ahe prtekach vpc ahe ---- ohio mde preprod ahe tyacha pn vpc ahe ---2 region connect kelte tgw through

crete 2 vpc private 0 public 1
vpc1 - 10.0.0.0/16
vpc2- 192.168.0.0/16
configure sg
crete tgw 
crete 2 tgw attachment 
go to route table edit it select destination tgw and one thing remeber at v1 put v2 cidr and select destination tgw
crete 2ec2 instance public subnet
try ping v1 -v2
-----------------------------------------------------------------------------------------------
go to ohic region
crete vpc and crete ec2 take acces
ctere tgw
crete attachment
edit routes - 3 ni vpc che cidir yenar
--------------------------------------------------------------------------------------------------------------
go nv - v-1 and v-2 - edit route - add ohic tgw-cidr 
--------------------------------------------------------------------------------------------------------
go to ohio region crete perring tgw attachment - select proper resion- tgw id
accept fron nv region
----------------------------------------------------------------------------------
allow satic routing ohio region
go tgw route table - crete staic route - select - vpc-1 cidr nv  - select pwrring ohivo
same do vpc2 cider
------------------------------------------------------------------------------------------------------------
allow satic routing  nv region
go tgw route table nv - crete staic route - select - vpc-1 cidr ohio - select pwrring nv

-------------------------------------------------------------------



You're setting up **a multi-region AWS network using Transit Gateway (TGW) and VPC Peering** between **North Virginia (us-east-1) and Ohio (us-east-2).**  

Hereâ€™s how you can do it step by step via the **AWS Management Console.**

---

## **ðŸŸ¢ Step 1: Setup in North Virginia (us-east-1)**
### **1.1 Create Two VPCs**
1. **Go to AWS Console** â†’ **VPC Dashboard** â†’ **Create VPC**
2. **VPC1 (Dev/Testing)**  
   - **Name:** `VPC1-NV`  
   - **CIDR Block:** `10.0.0.0/16`  
   - Click **Create VPC**
3. **VPC2 (Dev/Testing)**  
   - **Name:** `VPC2-NV`  
   - **CIDR Block:** `192.168.0.0/16`  
   - Click **Create VPC**

---

### **1.2 Create Subnets**
1. **Go to VPC Dashboard â†’ Subnets â†’ Create Subnet**
2. **For VPC1-NV (Public Subnet):**  
   - **VPC:** `VPC1-NV`  
   - **Name:** `VPC1-NV-Public`  
   - **Subnet CIDR:** `10.0.1.0/24`  
   - Click **Create Subnet**
3. **For VPC2-NV (Private Subnet):**  
   - **VPC:** `VPC2-NV`  
   - **Name:** `VPC2-NV-Private`  
   - **Subnet CIDR:** `192.168.1.0/24`  
   - Click **Create Subnet**

---

### **1.3 Create Security Groups**
1. **Go to EC2 Dashboard â†’ Security Groups â†’ Create Security Group**
2. **For `VPC1-NV-SG`:**  
   - **Allow ICMP** (ping) from `192.168.0.0/16`
3. **For `VPC2-NV-SG`:**  
   - **Allow ICMP** (ping) from `10.0.0.0/16`

---

### **1.4 Create Transit Gateway (TGW)**
1. **Go to VPC Dashboard â†’ Transit Gateways â†’ Create Transit Gateway**
2. **Settings:**  
   - **Name:** `TGW-NV`  
   - Click **Create Transit Gateway**

---

### **1.5 Create TGW Attachments (Connect VPCs to TGW)**
1. **Go to VPC Dashboard â†’ Transit Gateway Attachments â†’ Create Attachment**
2. **For VPC1-NV:**  
   - **TGW:** `TGW-NV`  
   - **VPC:** `VPC1-NV`  
   - **Subnet:** `VPC1-NV-Public`
   - Click **Create**
3. **For VPC2-NV:**  
   - **TGW:** `TGW-NV`  
   - **VPC:** `VPC2-NV`  
   - **Subnet:** `VPC2-NV-Private`
   - Click **Create**

---

### **1.6 Edit Route Tables**
1. **Go to VPC Dashboard â†’ Route Tables**
2. **For `VPC1-NV Route Table`:**  
   - **Destination:** `192.168.0.0/16`  
   - **Target:** `TGW-NV`
3. **For `VPC2-NV Route Table`:**  
   - **Destination:** `10.0.0.0/16`  
   - **Target:** `TGW-NV`

---

### **1.7 Launch EC2 Instances**
1. **Go to EC2 Dashboard â†’ Instances â†’ Launch Instance**
2. **For `VPC1-NV EC2`:**  
   - **Subnet:** `VPC1-NV-Public`  
   - **SG:** `VPC1-NV-SG`
3. **For `VPC2-NV EC2`:**  
   - **Subnet:** `VPC2-NV-Private`  
   - **SG:** `VPC2-NV-SG`

---

### **1.8 Test Connectivity**
- **SSH into `VPC1-NV EC2`**
- Run:  
  ```bash
  ping 192.168.1.X  # Replace with VPC2-NV EC2 Private IP
  ```

---

## **ðŸŸ¡ Step 2: Setup in Ohio (us-east-2)**
### **2.1 Create VPC in Ohio**
1. **Go to Ohio AWS Console â†’ VPC Dashboard â†’ Create VPC**
2. **VPC-Ohio:**  
   - **Name:** `VPC-Ohio`  
   - **CIDR Block:** `172.16.0.0/16`
   - Click **Create VPC**

---

### **2.2 Create EC2 in Ohio**
1. **Go to EC2 Dashboard â†’ Launch Instance**
2. **For `VPC-Ohio EC2`:**  
   - **Subnet:** `Ohio VPC Subnet`
   - **SG:** Allow ICMP and SSH

---

### **2.3 Create Transit Gateway (TGW) in Ohio**
1. **Go to Ohio AWS Console â†’ VPC Dashboard â†’ Transit Gateways**
2. **Create TGW**
   - **Name:** `TGW-Ohio`
   - Click **Create**

---

### **2.4 Attach VPC to `TGW-Ohio`**
1. **Go to VPC Dashboard â†’ Transit Gateway Attachments â†’ Create Attachment**
   - **TGW:** `TGW-Ohio`
   - **VPC:** `VPC-Ohio`
   - **Subnet:** Select one
   - Click **Create**

---

### **2.5 Edit Route Tables in Ohio**
1. **Go to VPC Dashboard â†’ Route Tables**
2. **For `VPC-Ohio Route Table`:**  
   - **Destination:** `10.0.0.0/16, 192.168.0.0/16`  
   - **Target:** `TGW-Ohio`

---

## **ðŸŸ  Step 3: Connect North Virginia and Ohio**
### **3.1 Edit Route Tables in NV**
1. **Go to VPC Dashboard â†’ Route Tables**
2. **For `VPC1-NV` and `VPC2-NV` Route Tables:**  
   - **Destination:** `172.16.0.0/16` (Ohio)  
   - **Target:** `TGW-NV`

---

### **3.2 Create TGW Peering**
1. **Go to Ohio AWS Console â†’ VPC Dashboard â†’ TGW Peering Attachments**
2. **Create TGW Peering Attachment**
   - **Request From:** `TGW-NV`
   - **Request To:** `TGW-Ohio`
   - Click **Create Peering**
3. **Go to North Virginia AWS Console â†’ Accept TGW Peering**

---

### **3.3 Allow Static Routing in Ohio**
1. **Go to TGW Route Table in Ohio**
2. **Create Static Routes:**
   - **Destination:** `10.0.0.0/16 (VPC1-NV)`
   - **Target:** TGW Peering to NV
   - **Destination:** `192.168.0.0/16 (VPC2-NV)`
   - **Target:** TGW Peering to NV

---

### **3.4 Allow Static Routing in NV**
1. **Go to TGW Route Table in NV**
2. **Create Static Routes:**
   - **Destination:** `172.16.0.0/16 (VPC-Ohio)`
   - **Target:** TGW Peering to Ohio

---

## **ðŸŸ¢ Step 4: Final Testing**
- **SSH into `VPC1-NV EC2`**
- Try **pinging**:
  ```bash
  ping 172.16.X.X  # Replace with Ohio EC2 private IP
  ```

âœ… **If successful, your setup is complete!** ðŸš€
